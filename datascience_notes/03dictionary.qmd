---
knitr: 
  opts_chunk: 
    comment: "#>>>"
    collapse: TRUE
number-sections: true
code-fold: show
code-link: true
code-tools: true
---

# 字典

字典（dictionary）是一系列***键值对***。每个***键***相关联的***值***可以是数、字符串、列表、元组乃至字典。

```{python}
alien_0 = {"color":"green","points":5}
alien_0
```

## 操纵字典

### 访问值

```{python}
alien_0["color"]
alien_0["points"]
```

### 添加键值对

```{python}
alien_0["x"] = 0
alien_0["y"] = 25
alien_0
```

### 从空字典开始

```{python}
alien_0 = {}
alien_0["color"] = "green"
alien_0["points"] = 5

alien_0
```

### 修改

```{python}
alien_0["color"] =[ "yellow","red","blue"]
alien_0
```

### 删除

```{python}
alien_0 = {"color":"green","points":5}

del alien_0["points"]
alien_0
```

### 由类似的对象组成的字典

```{python}
like_language={
    "jen":"python",
    "sarah":"c",
    "edward":"r",
    "phil":"python",
    }
like_language
```

### `get()`方法访问值

```{python}
#| eval: false
alien_0["speed"]
#>>> Traceback (most recent call last):
#>>>   File "<string>", line 1, in <module>
#>>> KeyError: 'speed'
```

get()方法第一个参数用于指定键key，第二个参数为指定的键不存在时的返回值。

```{python}
alien_0 = {"color":"green","points":5}
alien_0.get("color")
alien_0.get("speed","Error,no existing")
```

## 遍历字典

### 遍历所有键值对

`Dict.items()`

```{python}
like_language={
    "jen":"python",
    "sarah":"c",
    "edward":"r",
    "phil":"python",
    }
like_language.items()

for i,j in like_language.items():
    print(f"Key:{i}")
    print(f"Value:{j}")
    print(f"{i.title()}'s favorite language is {j.title()}.\n")
```

### 遍历所有键

`Dict.keys()`

```{python}
like_language.keys()

for i in like_language.keys():
    print(f"Key:{i.title()}")
```

::: callout-note
默认遍历使用键

```{python}
for i in like_language: 
    print(f"Key:{i.title()}")
```
:::

### 

# 默认遍历键

for i in like_language: print(f"Key:{i.title()}")

### 按特定顺序遍历所有键

`sorted()函数`

```{python}
like_language={
    "jen":"python",
    "sarah":"c",
    "edward":"r",
    "phil":"python",
    }
for i in sorted(like_language.keys()):
    print(i.title())
```

### 遍历所有值

`Dict.values()`

```{python}
like_language.values()
for lan in like_language.values():
    lan.title()
```

为剔除重复项，可使用集合`set()`函数。

```{python}
for lan in set(like_language.values()):
    lan.title()
```

# 集合set

::: callout-note
集合的性质：互异性，无序性，确定性。

可以使用一对花括号{}直接创建集合，用逗号分隔。

```{python}
language_set = {"python","r","c"}
language_set
```
:::

## 嵌套

### 字典列表

列表的每个元素是一个字典

```{python}
alien_0 = {'color': 'green', 'points': 5}
alien_1 = {'color': 'yellow', 'points': 10} 
alien_2 = {'color': 'red', 'points': 15}
aliens = [alien_0, alien_1, alien_2] 
for alien in aliens: 
    print(alien)
```

### 在字典中存储列表

```{python}
r_object = {
    "num":[1,2,3,4,5],
    "strings":["qwe","asd","zxc"],
    "bool":[True,False],
}
r_object["num"]
```

### 在字典中存储字典

```{python}
email = {
    "Tencent":{
        "prefix":"3036683293",
        "suffix":"@qq.com",
        "state":"hardly"
    },
    "USTC":{
        "prefix":"wangal00",
        "suffix":"@mail.ustc.edu.cn",
        "state":"usually",
    },
    "Microsoft":{
        "prefix":"wanganlin00",
        "suffix":"@outlook.com",
        "state":"often",
    },
    "Google":{
        "prefix":"wanganlin00",
        "suffix":"@gmail.com",
        "state":"can't",
    },
}
for i,j in email.items():
    print(f"Belongs to {i}:")
    print(f'My email is {j["prefix"]}{j["suffix"]} , I {j["state"]} use it.\n')
        
```
