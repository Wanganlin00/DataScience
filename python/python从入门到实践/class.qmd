---
knitr: 
  opts_chunk: 
    comment: "#>>>"
    collapse: TRUE
number-sections: true
code-fold: show
code-link: true
code-tools: true
---

# 类class

面向对象编程（object-oriented programming，OOP）：编写表示现实世界中的事物和情景的**类（class）并**基于这些类创建**对象（object）。**在编写类时，你要定义一系列类的对象都具备的通用行为。

根据类创建对象称为**实例化**，**实例（instance）**

类中的函数称为**方法**，`_init_(self,...)` 是一个特殊方法，其中`self` 形参指向实例，必不可少且必须位于首位。其他形参是基于类创建的实例的初始化属性。可通过实例访问的变量称为**属性（attribute）**。

## 定义类和方法

```{python}
class Car:
    """表示汽车的类，存储有关汽车的信息 """
    def __init__(self, make, model, year): 
        """初始化描述汽车的属性""" 
        self.make = make 
        self.model = model 
        self.year = year 
        self.odometer_reading = 0  # 给属性指定默认值
    def get_descriptive_name(self): 
        """返回格式规范的描述性信息""" 
        long_name = f"{self.year} {self.make} {self.model}" 
        return long_name.title() 
    def read_odometer(self):
        """打印汽车行驶里程"""
        print(f"This car has {self.odometer_reading} miles on it.")
    def update_odometer(self,mileage):
        """更新里程数
           禁止回调
        """
        if mileage >= self.odometer_reading:
            self.odometer_reading = mileage
        else:
            print("错误！禁止回调！！！")

my_new_car = Car('audi', 'a4', 2024)

# 访问属性
my_new_car.make
my_new_car.odometer_reading

# 调用方法
print(my_new_car.get_descriptive_name())
my_new_car.read_odometer() 
```

### 修改属性的值

```{python}
# 直接修改属性的值
my_new_car.odometer_reading = 55
my_new_car.odometer_reading

# 通过方法修改
my_new_car.update_odometer(100)
my_new_car.odometer_reading
my_new_car.update_odometer(24)
```

## 继承inheritance

原有的类称为父类（parent class），新类称为子类（child class）
