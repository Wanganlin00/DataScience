[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science_notes",
    "section": "",
    "text": "1 Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\nCode1 + 1\n#&gt; [1] 2"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "\n2  Introduction\n",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\nCode1 + 1\n#&gt; [1] 2\n\n\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "\n3  Summary\n",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\nCode1 + 1\n#&gt; [1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "4  References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "R-Python.html",
    "href": "R-Python.html",
    "title": "\n5  R-Python\n",
    "section": "",
    "text": "6 R-Python {unnumbered}"
  },
  {
    "objectID": "R-Python.html#reticulate-包",
    "href": "R-Python.html#reticulate-包",
    "title": "\n5  R-Python\n",
    "section": "\n6.1 reticulate 包\n",
    "text": "6.1 reticulate 包\n\n\nCodelibrary(reticulate)"
  },
  {
    "objectID": "R-Python.html#安装-python-模块",
    "href": "R-Python.html#安装-python-模块",
    "title": "\n5  R-Python\n",
    "section": "\n6.2 安装 python 模块\n",
    "text": "6.2 安装 python 模块\n\n安装Python module\n\nCode# 默认从conda安装\n\npy_install(\"seaborn\")\n\n# 查看模块是否已安装\npy_module_available('seaborn')\npy_module_available('numpy')\npy_module_available('pandas')\npy_module_available('scanpy')"
  },
  {
    "objectID": "R-Python.html#调用-python-模块",
    "href": "R-Python.html#调用-python-模块",
    "title": "\n5  R-Python\n",
    "section": "\n6.3 调用 Python 模块",
    "text": "6.3 调用 Python 模块\n\nCode# 调用os模块(module)的listdir()函数\nos &lt;- import(\"os\")\nos$listdir(\"./\")\n#&gt;&gt;&gt;  [1] \".Rproj.user\"             \"index.qmd\"              \n#&gt;&gt;&gt;  [3] \"references.qmd\"          \"references.bib\"         \n#&gt;&gt;&gt;  [5] \".quarto\"                 \".gitignore\"             \n#&gt;&gt;&gt;  [7] \"_quarto.yml\"             \"cover.png\"              \n#&gt;&gt;&gt;  [9] \"intro.qmd\"               \"summary.qmd\"            \n#&gt;&gt;&gt; [11] \"datascience_notes.Rproj\" \"01basics.qmd\"           \n#&gt;&gt;&gt; [13] \"02list.qmd\"              \"03dictionary.qmd\"       \n#&gt;&gt;&gt; [15] \"control_structure.qmd\"   \"function.qmd\"           \n#&gt;&gt;&gt; [17] \"R-Python.qmd\"            \"class.qmd\"              \n#&gt;&gt;&gt; [19] \"index.html\"              \"site_libs\"              \n#&gt;&gt;&gt; [21] \"intro.html\"              \"pip-command-options.jpg\"\n#&gt;&gt;&gt; [23] \"summary.html\"            \"references.html\"        \n#&gt;&gt;&gt; [25] \"R-Python_files\"          \"R-Python.html\"          \n#&gt;&gt;&gt; [27] \"01basics.rmarkdown\"      \"docs\"                   \n#&gt;&gt;&gt; [29] \"index_cache\"             \"intro_cache\"            \n#&gt;&gt;&gt; [31] \"summary_cache\"           \"R-Python.rmarkdown\"     \n#&gt;&gt;&gt; [33] \"R-Python_cache\"\n\n# 调用seaborn模块的load_dataset()函数\n# 需要seaborn模块已安装\nsns &lt;- import(\"seaborn\")\ntips &lt;- sns$load_dataset(\"tips\")\nprint(head(tips))\n#&gt;&gt;&gt;   total_bill  tip    sex smoker day   time size\n#&gt;&gt;&gt; 1      16.99 1.01 Female     No Sun Dinner    2\n#&gt;&gt;&gt; 2      10.34 1.66   Male     No Sun Dinner    3\n#&gt;&gt;&gt; 3      21.01 3.50   Male     No Sun Dinner    3\n#&gt;&gt;&gt; 4      23.68 3.31   Male     No Sun Dinner    2\n#&gt;&gt;&gt; 5      24.59 3.61 Female     No Sun Dinner    4\n#&gt;&gt;&gt; 6      25.29 4.71   Male     No Sun Dinner    4"
  },
  {
    "objectID": "R-Python.html#markdown中直接使用python",
    "href": "R-Python.html#markdown中直接使用python",
    "title": "\n5  R-Python\n",
    "section": "\n6.4 markdown中直接使用Python",
    "text": "6.4 markdown中直接使用Python\n\nCodeimport seaborn as sns\ntips = sns.load_dataset(\"tips\")\ntips.head()\n#&gt;&gt;&gt;    total_bill   tip     sex smoker  day    time  size\n#&gt;&gt;&gt; 0       16.99  1.01  Female     No  Sun  Dinner     2\n#&gt;&gt;&gt; 1       10.34  1.66    Male     No  Sun  Dinner     3\n#&gt;&gt;&gt; 2       21.01  3.50    Male     No  Sun  Dinner     3\n#&gt;&gt;&gt; 3       23.68  3.31    Male     No  Sun  Dinner     2\n#&gt;&gt;&gt; 4       24.59  3.61  Female     No  Sun  Dinner     4\n\nsns.scatterplot(x=\"total_bill\", y=\"tip\", data=tips, hue=\"smoker\")\n\nimport pandas"
  },
  {
    "objectID": "R-Python.html#markdown-中-python-与-r-对象相互调用",
    "href": "R-Python.html#markdown-中-python-与-r-对象相互调用",
    "title": "\n5  R-Python\n",
    "section": "\n6.5 markdown 中 Python 与 R 对象相互调用\n",
    "text": "6.5 markdown 中 Python 与 R 对象相互调用\n\n\n6.5.1 Python调用R对象\n\nCodex &lt;- c(1, 2, 3)\ny &lt;- data.frame(a = c(1, 2), b = c(3, 4))\n\n\n\nCoder.x\n#&gt;&gt;&gt; [1.0, 2.0, 3.0]\nr.y\n#&gt;&gt;&gt;      a    b\n#&gt;&gt;&gt; 0  1.0  3.0\n#&gt;&gt;&gt; 1  2.0  4.0\n\n\n\n6.5.2 R调用Python对象\n\nCodeimport pandas as pd\nm = [1, 2, 3]\nn = pd.DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n\n\n\nCodepy$m\n#&gt;&gt;&gt; [1] 1 2 3\npy$n\n\n\n\n\na\nb\n\n\n\n1\n2\n\n\n3\n4"
  },
  {
    "objectID": "R-Python.html#python-与-r-对象相互转换",
    "href": "R-Python.html#python-与-r-对象相互转换",
    "title": "\n5  R-Python\n",
    "section": "\n6.6 Python 与 R 对象相互转换\n",
    "text": "6.6 Python 与 R 对象相互转换\n\n\nType conversions\n\n\n\n\n\n\nR\nPython\n例\n\n\n\n单元素向量\n标量Scalar\n\n1、 1L、TRUE、\"foo\"\n\n\n\n未命名列表或多元素向量\nList\n\nc(1.0, 2.0, 3.0), c(1L, 2L, 3L)\n\n\n\n命名列表\nDict\n\nlist(a = 1L, b = 2.0), dict(x = x_data)\n\n\n\nMatrix/Array\nNumPy ndarray\nmatrix(c(1,2,3,4), nrow = 2, ncol = 2)\n\n\nData Frame\nPandas DataFrame\ndata.frame(x = c(1,2,3), y = c(\"a\", \"b\", \"c\"))\n\n\nFunction\nPython function\nfunction(x) x + 1\n\n\nNULL, TRUE, FALSE\nNone, True, False\n\nNULL, TRUE, ALSE\n\n\n\n\n\n6.6.1 R → Python\n\nCodeA &lt;- 1\nB &lt;- c(1, 2, 3)\nC &lt;- c(a = 1, b = 2, c = 3)\nD &lt;- matrix(1:4, nrow = 2)\nE &lt;- data.frame(a = c(1, 2), b = c(3, 4))\nG &lt;- list(1, 2, 3)\nH &lt;- list(c(1, 2), c(3, 4))\nI &lt;- list(a = c(1, 2), b = c(3, 4))\nJ &lt;- function(a, b) {\n  return(a + b)\n  }\nK1 &lt;- NULL\nK2 &lt;- T\nK3 &lt;- F\n\n\n\nCode### float\nr.A\n#&gt;&gt;&gt; 1.0\ntype(r.A)\n#&gt;&gt;&gt; &lt;class 'float'&gt;\n\n### list\nr.B\n#&gt;&gt;&gt; [1.0, 2.0, 3.0]\ntype(r.B)\n#&gt;&gt;&gt; &lt;class 'list'&gt;\n\nr.C\n#&gt;&gt;&gt; [1.0, 2.0, 3.0]\ntype(r.C)\n#&gt;&gt;&gt; &lt;class 'list'&gt;\n\n### numpy.ndarray\nr.D\n#&gt;&gt;&gt; array([[1, 3],\n#&gt;&gt;&gt;        [2, 4]])\ntype(r.D)\n#&gt;&gt;&gt; &lt;class 'numpy.ndarray'&gt;\n\n### pandas.core.frame.DataFrame\nr.E\n#&gt;&gt;&gt;      a    b\n#&gt;&gt;&gt; 0  1.0  3.0\n#&gt;&gt;&gt; 1  2.0  4.0\ntype(r.E)\n#&gt;&gt;&gt; &lt;class 'pandas.core.frame.DataFrame'&gt;\n\n### list\nr.G\n#&gt;&gt;&gt; [1.0, 2.0, 3.0]\ntype(r.G)\n#&gt;&gt;&gt; &lt;class 'list'&gt;\n\nr.H\n#&gt;&gt;&gt; [[1.0, 2.0], [3.0, 4.0]]\ntype(r.H)\n#&gt;&gt;&gt; &lt;class 'list'&gt;\n\n### dict\nr.I\n#&gt;&gt;&gt; {'a': [1.0, 2.0], 'b': [3.0, 4.0]}\ntype(r.I)\n#&gt;&gt;&gt; &lt;class 'dict'&gt;\n\n### function\nr.J\n#&gt;&gt;&gt; &lt;function make_python_function.&lt;locals&gt;.python_function at 0x000001675B92B4C0&gt;\ntype(r.J)\n#&gt;&gt;&gt; &lt;class 'function'&gt;\nr.J(2, 3)\n#&gt;&gt;&gt; 5\n\n\n### NoneType\nr.K1\ntype(r.K1)\n#&gt;&gt;&gt; &lt;class 'NoneType'&gt;\n\n\n### bool\nr.K2\n#&gt;&gt;&gt; True\ntype(r.K2)\n#&gt;&gt;&gt; &lt;class 'bool'&gt;\nr.K3\n#&gt;&gt;&gt; False\ntype(r.K3)\n#&gt;&gt;&gt; &lt;class 'bool'&gt;\n\n\n\n6.6.2 Python → R\n\nCodeA = 1\nB = [1, 2, 3]\nC = [[1, 2], [3, 4]]\nD1 = [[1], 2, 3]\nD2 = [[1, 2], 2, 3]\n\nE = (1, 2, 3)\n\nFF = ((1, 2), (3, 4))\n\nG = ((1, 2), 3, 4)\n\nH = {\"a\": [1, 2, 3],  \"b\": [2, 3, 4]}\n     \nI = {\"a\": 1,\"b\": [2, 3, 4]}\n     \ndef J(a, b):\n  return a + b\n\n\n\nCode### integer\npy$A\n#&gt;&gt;&gt; [1] 1\nclass(py$A)\n#&gt;&gt;&gt; [1] \"integer\"\n\npy$B\n#&gt;&gt;&gt; [1] 1 2 3\nclass(py$B)\n#&gt;&gt;&gt; [1] \"integer\"\n\n### list\npy$C\n#&gt;&gt;&gt; [[1]]\n#&gt;&gt;&gt; [1] 1 2\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; [[2]]\n#&gt;&gt;&gt; [1] 3 4\nclass(py$C)\n#&gt;&gt;&gt; [1] \"list\"\n\npy$D1\n#&gt;&gt;&gt; [[1]]\n#&gt;&gt;&gt; [1] 1\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; [[2]]\n#&gt;&gt;&gt; [1] 2\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; [[3]]\n#&gt;&gt;&gt; [1] 3\nclass(py$D1)\n#&gt;&gt;&gt; [1] \"list\"\n\npy$D2\n#&gt;&gt;&gt; [[1]]\n#&gt;&gt;&gt; [1] 1 2\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; [[2]]\n#&gt;&gt;&gt; [1] 2\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; [[3]]\n#&gt;&gt;&gt; [1] 3\nclass(py$D2)\n#&gt;&gt;&gt; [1] \"list\"\n\npy$E\n#&gt;&gt;&gt; [[1]]\n#&gt;&gt;&gt; [1] 1\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; [[2]]\n#&gt;&gt;&gt; [1] 2\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; [[3]]\n#&gt;&gt;&gt; [1] 3\nclass(py$E)\n#&gt;&gt;&gt; [1] \"list\"\n\npy$FF\n#&gt;&gt;&gt; [[1]]\n#&gt;&gt;&gt; [[1]][[1]]\n#&gt;&gt;&gt; [1] 1\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; [[1]][[2]]\n#&gt;&gt;&gt; [1] 2\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; \n#&gt;&gt;&gt; [[2]]\n#&gt;&gt;&gt; [[2]][[1]]\n#&gt;&gt;&gt; [1] 3\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; [[2]][[2]]\n#&gt;&gt;&gt; [1] 4\nclass(py$FF)\n#&gt;&gt;&gt; [1] \"list\"\n\npy$G\n#&gt;&gt;&gt; [[1]]\n#&gt;&gt;&gt; [[1]][[1]]\n#&gt;&gt;&gt; [1] 1\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; [[1]][[2]]\n#&gt;&gt;&gt; [1] 2\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; \n#&gt;&gt;&gt; [[2]]\n#&gt;&gt;&gt; [1] 3\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; [[3]]\n#&gt;&gt;&gt; [1] 4\nclass(py$G)\n#&gt;&gt;&gt; [1] \"list\"\n\npy$H\n#&gt;&gt;&gt; $a\n#&gt;&gt;&gt; [1] 1 2 3\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; $b\n#&gt;&gt;&gt; [1] 2 3 4\nclass(py$H)\n#&gt;&gt;&gt; [1] \"list\"\n\npy$I\n#&gt;&gt;&gt; $a\n#&gt;&gt;&gt; [1] 1\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; $b\n#&gt;&gt;&gt; [1] 2 3 4\nclass(py$I)\n#&gt;&gt;&gt; [1] \"list\"\n\n### function\npy$J\n#&gt;&gt;&gt; &lt;function J at 0x000001675A954820&gt;\nclass(py$J)\n#&gt;&gt;&gt; [1] \"python.builtin.function\" \"python.builtin.object\"\npy$J(2, 3)\n#&gt;&gt;&gt; [1] 5"
  },
  {
    "objectID": "01basics.html",
    "href": "01basics.html",
    "title": "\n6  Basics\n",
    "section": "",
    "text": "7 写在前面\n在本书中，使用的集成开发环境（IDE）是Rstudio。\n在行文中， code 表示代码（code）\nR代码块中， #&gt; 表示运行R代码输出的结果\nPython代码块中， #&gt;&gt;&gt; 表示运行Python代码输出的结果\nPython package index（pypi） 是一个Python编程语言的软件库。\n命令框 cmd"
  },
  {
    "objectID": "01basics.html#环境配置",
    "href": "01basics.html#环境配置",
    "title": "\n6  Basics\n",
    "section": "\n7.1 环境配置",
    "text": "7.1 环境配置\n\nCode### 环境配置\nsessioninfo::session_info()\n#&gt; ─ Session info ───────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.3.2 (2023-10-31 ucrt)\n#&gt;  os       Windows 10 x64 (build 19045)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language en\n#&gt;  collate  Chinese (Simplified)_China.utf8\n#&gt;  ctype    Chinese (Simplified)_China.utf8\n#&gt;  tz       Asia/Shanghai\n#&gt;  date     2024-02-29\n#&gt;  pandoc   3.1.1 @ D:/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ───────────────────────────────────────────────────────────────────\n#&gt;  package     * version    date (UTC) lib source\n#&gt;  BiocManager * 1.30.22    2023-08-08 [1] CRAN (R 4.3.2)\n#&gt;  cachem        1.0.8      2023-05-01 [1] CRAN (R 4.3.2)\n#&gt;  cellranger    1.1.0      2016-07-27 [1] CRAN (R 4.3.2)\n#&gt;  cli           3.6.2      2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;  colorspace    2.1-0      2023-01-23 [1] CRAN (R 4.3.1)\n#&gt;  conflicted  * 1.2.0.9000 2023-11-26 [1] Github (r-lib/conflicted@321d77c)\n#&gt;  digest        0.6.34     2024-01-11 [1] CRAN (R 4.3.2)\n#&gt;  dplyr       * 1.1.4      2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;  evaluate      0.23       2023-11-01 [1] CRAN (R 4.3.2)\n#&gt;  fansi         1.0.6      2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;  fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.3.2)\n#&gt;  forcats     * 1.0.0      2023-01-29 [1] CRAN (R 4.3.2)\n#&gt;  generics      0.1.3      2022-07-05 [1] CRAN (R 4.3.2)\n#&gt;  ggplot2     * 3.4.4      2023-10-12 [1] CRAN (R 4.3.2)\n#&gt;  glue          1.7.0      2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;  gtable        0.3.4      2023-08-21 [1] CRAN (R 4.3.2)\n#&gt;  hms           1.1.3      2023-03-21 [1] CRAN (R 4.3.2)\n#&gt;  htmltools     0.5.7      2023-11-03 [1] CRAN (R 4.3.2)\n#&gt;  htmlwidgets   1.6.4      2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;  jsonlite      1.8.8      2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;  knitr         1.45       2023-10-30 [1] CRAN (R 4.3.2)\n#&gt;  lifecycle     1.0.4      2023-11-07 [1] CRAN (R 4.3.2)\n#&gt;  lubridate   * 1.9.3      2023-09-27 [1] CRAN (R 4.3.2)\n#&gt;  magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.3.2)\n#&gt;  memoise       2.0.1      2021-11-26 [1] CRAN (R 4.3.2)\n#&gt;  munsell       0.5.0      2018-06-12 [1] CRAN (R 4.3.2)\n#&gt;  patchwork   * 1.2.0      2024-01-08 [1] CRAN (R 4.3.2)\n#&gt;  pillar        1.9.0      2023-03-22 [1] CRAN (R 4.3.2)\n#&gt;  pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.3.2)\n#&gt;  purrr       * 1.0.2      2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;  R6            2.5.1      2021-08-19 [1] CRAN (R 4.3.2)\n#&gt;  readr       * 2.1.5      2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;  readxl      * 1.4.3      2023-07-06 [1] CRAN (R 4.3.2)\n#&gt;  rlang         1.1.3      2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;  rmarkdown     2.25       2023-09-18 [1] CRAN (R 4.3.2)\n#&gt;  rstudioapi    0.15.0     2023-07-07 [1] CRAN (R 4.3.2)\n#&gt;  scales        1.3.0      2023-11-28 [1] CRAN (R 4.3.2)\n#&gt;  sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.3.2)\n#&gt;  stringi       1.8.3      2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;  stringr     * 1.5.1      2023-11-14 [1] CRAN (R 4.3.2)\n#&gt;  tibble      * 3.2.1      2023-03-20 [1] CRAN (R 4.3.2)\n#&gt;  tidyr       * 1.3.0      2023-01-24 [1] CRAN (R 4.3.2)\n#&gt;  tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.3.2)\n#&gt;  tidyverse   * 2.0.0      2023-02-22 [1] CRAN (R 4.3.2)\n#&gt;  timechange    0.2.0      2023-01-11 [1] CRAN (R 4.3.2)\n#&gt;  tzdb          0.4.0      2023-05-12 [1] CRAN (R 4.3.2)\n#&gt;  utf8          1.2.4      2023-10-22 [1] CRAN (R 4.3.2)\n#&gt;  vctrs         0.6.5      2023-12-01 [1] CRAN (R 4.3.2)\n#&gt;  withr         2.5.2      2023-10-30 [1] CRAN (R 4.3.2)\n#&gt;  writexl     * 1.4.2      2023-01-06 [1] CRAN (R 4.3.2)\n#&gt;  xfun          0.41       2023-11-01 [1] CRAN (R 4.3.2)\n#&gt;  yaml          2.3.8      2023-12-11 [1] CRAN (R 4.3.2)\n#&gt; \n#&gt;  [1] D:/R-4.3.2/library\n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "01basics.html#在-r-console-中交互式运行-python",
    "href": "01basics.html#在-r-console-中交互式运行-python",
    "title": "\n6  Basics\n",
    "section": "\n7.2 在 R Console 中交互式运行 Python\n",
    "text": "7.2 在 R Console 中交互式运行 Python\n\n\nreticulate::repl_python () 进入 Python 环境\nexit / quit 退出 Python 环境\n\n\nCodelibrary(reticulate)\n# py_config()\n\n### miniconda 环境\n#&gt; install_miniconda() \n#&gt; miniconda_path()\n#&gt; miniconda_update()\n\n### 进入Python环境\nreticulate::repl_python()"
  },
  {
    "objectID": "01basics.html#变量variable",
    "href": "01basics.html#变量variable",
    "title": "\n6  Basics\n",
    "section": "\n9.1 变量variable",
    "text": "9.1 变量variable\n规则：\n\n变量名只能包含字母、数字、下划线、中文字符等，不能包含空格，且能以字母或下划线打头，不能以数字打头。\n不要用Python关键字和函数名作为变量名。\n变量名具有描述性。\n\n创建一个名为message的变量（variable），\"Hello python world!\"是变量指向的值（value）。\n\nCodemessage = \"Hello python world!\" \n\n# 直接打印 或 print()\nmessage\n#&gt;&gt;&gt; 'Hello python world!'\nprint(message)\n#&gt;&gt;&gt; Hello python world!\n\n\n修改变量值\n\nCodemessage = \"Hello python Interpreter\"\nprint(message)\n#&gt;&gt;&gt; Hello python Interpreter"
  },
  {
    "objectID": "01basics.html#字符串string",
    "href": "01basics.html#字符串string",
    "title": "\n6  Basics\n",
    "section": "\n9.2 字符串string",
    "text": "9.2 字符串string\n用引号引起的是字符串，其中引号既可以是双引号，也可以是单引号。\n\nCode\"This is a string\"\n#&gt;&gt;&gt; 'This is a string'\n'This is also a string'\n#&gt;&gt;&gt; 'This is also a string'\n\"他说'世界是你们的，也是我们的，但终究是你们的'。流泪\\u1000\"\n#&gt;&gt;&gt; \"他说'世界是你们的，也是我们的，但终究是你们的'。流泪က\"\n\n\n\n9.2.1 使用方法method修改字符串\n例如，在函数调用print()中，方法 title() 出现在变量名后面。\nmethod是Python对数据执行的操作，在name.title()中，name是变量名，句点.让Python对name变量执行方法title()指定的操作。\n\nCodename = \"ada lovelace\"\nname\n#&gt;&gt;&gt; 'ada lovelace'\nprint(name)\n#&gt;&gt;&gt; ada lovelace\nprint(name.title())\n#&gt;&gt;&gt; Ada Lovelace\nprint(name.upper())\n#&gt;&gt;&gt; ADA LOVELACE\nprint(name.lower())\n#&gt;&gt;&gt; ada lovelace\nname\n#&gt;&gt;&gt; 'ada lovelace'\n\n\n\nmethod\n\nmethod\n作用\n\n\n\ntitle()\n以首字母大写的方式显示每个单词\n\n\nupper()\n使字母全大写\n\n\nlower()\n使字母全小写\n\n\nstrip()\n删除左右空白\n\n\nrstrip()\n删除右空白\n\n\nlstrip()\n删除左空白\n\n\nremoveprefix(x)\n删除前缀x\n\n\n\n9.2.2 在字符串中使用变量\nf字符串，在左\"之前添加字母f （format设置格式），再将变量名放入{}内。\n\nCodefirst_name = \"ada\"\nlast_name = \"lovelace\"\nfull_name = f\"{first_name} {last_name}\"\nprint(full_name)\n#&gt;&gt;&gt; ada lovelace\nprint(f\"Hello,{full_name.title()}!\")\n#&gt;&gt;&gt; Hello,Ada Lovelace!\ngreet = f\"Hello,{full_name.title()}!\"\nprint(greet)\n#&gt;&gt;&gt; Hello,Ada Lovelace!\n\nname = \"Eric\"\nmessage = f\"Hello {name},would you like to learn some Python today?\"\nmessage\n#&gt;&gt;&gt; 'Hello Eric,would you like to learn some Python today?'\n\n\n\n9.2.3 使用制表符或换行符添加空白\n空白泛指任何非打印字符，如空格、制表符、换行符。\n\nCodeprint(\"Python\")\n#&gt;&gt;&gt; Python\nprint(\"\\tPython\")\n#&gt;&gt;&gt;    Python\nprint(\"Languages:\\n\\t1.Python\\n\\t2.R\\n\\t3.C\")\n#&gt;&gt;&gt; Languages:\n#&gt;&gt;&gt;    1.Python\n#&gt;&gt;&gt;    2.R\n#&gt;&gt;&gt;    3.C\n\n\n\n9.2.4 删除空白\n\nCodelanguage = \" python \"\nlanguage\n#&gt;&gt;&gt; ' python '\n#删除右空白\nlanguage.rstrip()\n#&gt;&gt;&gt; ' python'\n\n#删除左空白\nlanguage.lstrip()\n#&gt;&gt;&gt; 'python '\n\n#删除左右空白\nlanguage.strip()\n#&gt;&gt;&gt; 'python'\n\n\n但这种删除是暂时的\n\nCodelanguage\n#&gt;&gt;&gt; ' python '\n\n\n\n9.2.5 删除前后缀\n\nCodegithub_url = \"https://github.com\"\ngithub_url.removeprefix(\"https://\")\n#&gt;&gt;&gt; 'github.com'\n\nfile = \"basics.txt\"\nfile.removesuffix(\".txt\")\n#&gt;&gt;&gt; 'basics'"
  },
  {
    "objectID": "01basics.html#数number",
    "href": "01basics.html#数number",
    "title": "\n6  Basics\n",
    "section": "\n9.3 数number",
    "text": "9.3 数number\n\n9.3.1 整数integer\n可执行加+、减-、乘*、除/、整除//、乘方**、求模（取余数） % 运算。\n\nCode2+3\n#&gt;&gt;&gt; 5\n5-2\n#&gt;&gt;&gt; 3\n2*3\n#&gt;&gt;&gt; 6\n8/2\n#&gt;&gt;&gt; 4.0\n8//2\n#&gt;&gt;&gt; 4\n9//2\n#&gt;&gt;&gt; 4\n5**2\n#&gt;&gt;&gt; 25\n10%3\n#&gt;&gt;&gt; 1\nprint(5+3)\n#&gt;&gt;&gt; 8\nprint(9-1)\n#&gt;&gt;&gt; 8\nprint(4*2)\n#&gt;&gt;&gt; 8\nprint(16//2)\n#&gt;&gt;&gt; 8\nprint(2**3)\n#&gt;&gt;&gt; 8\n\n\n\n9.3.2 浮点数float\n\nCode0.2+0.5\n#&gt;&gt;&gt; 0.7\n2*0.4\n#&gt;&gt;&gt; 0.8\n0.2+0.1\n#&gt;&gt;&gt; 0.30000000000000004\n3*0.1\n#&gt;&gt;&gt; 0.30000000000000004\n\n4/2\n#&gt;&gt;&gt; 2.0\n1+2.0\n#&gt;&gt;&gt; 3.0\n3.0**2\n#&gt;&gt;&gt; 9.0\n\n\n\n9.3.3 数中的下划线\n位数分组\n\nCodex = 14_000_000_000\nx\n#&gt;&gt;&gt; 14000000000\n\n\n\n9.3.4 同时给多个变量赋值\n用逗号分隔\n\nCodex,y,z = 1,2.0,4**2\nx\n#&gt;&gt;&gt; 1\ny\n#&gt;&gt;&gt; 2.0\nz\n#&gt;&gt;&gt; 16\n\n\n常量constant\n变量名全大写字母表示常量。\n\nCodeFAVORITE_NUMBER = 9\nmessage = f\"My favorite number is {FAVORITE_NUMBER}\"\nprint(message)\n#&gt;&gt;&gt; My favorite number is 9"
  },
  {
    "objectID": "01basics.html#python原则",
    "href": "01basics.html#python原则",
    "title": "\n6  Basics\n",
    "section": "\n9.4 Python原则",
    "text": "9.4 Python原则\n\nCodeimport this\n#&gt;&gt;&gt; The Zen of Python, by Tim Peters\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; Beautiful is better than ugly.\n#&gt;&gt;&gt; Explicit is better than implicit.\n#&gt;&gt;&gt; Simple is better than complex.\n#&gt;&gt;&gt; Complex is better than complicated.\n#&gt;&gt;&gt; Flat is better than nested.\n#&gt;&gt;&gt; Sparse is better than dense.\n#&gt;&gt;&gt; Readability counts.\n#&gt;&gt;&gt; Special cases aren't special enough to break the rules.\n#&gt;&gt;&gt; Although practicality beats purity.\n#&gt;&gt;&gt; Errors should never pass silently.\n#&gt;&gt;&gt; Unless explicitly silenced.\n#&gt;&gt;&gt; In the face of ambiguity, refuse the temptation to guess.\n#&gt;&gt;&gt; There should be one-- and preferably only one --obvious way to do it.\n#&gt;&gt;&gt; Although that way may not be obvious at first unless you're Dutch.\n#&gt;&gt;&gt; Now is better than never.\n#&gt;&gt;&gt; Although never is often better than *right* now.\n#&gt;&gt;&gt; If the implementation is hard to explain, it's a bad idea.\n#&gt;&gt;&gt; If the implementation is easy to explain, it may be a good idea.\n#&gt;&gt;&gt; Namespaces are one honking great idea -- let's do more of those!"
  },
  {
    "objectID": "02list.html#访问元素",
    "href": "02list.html#访问元素",
    "title": "\n7  列表list\n",
    "section": "\n7.1 访问元素",
    "text": "7.1 访问元素\n索引从0开始，而不是从1开始。\n\nCodeprint(Country[0])\n#&gt;&gt;&gt; China\nprint(Country[4])\n#&gt;&gt;&gt; German\n\n\n也可以从倒数第一个数向前访问\n\nCodeprint(Country[-1])\n#&gt;&gt;&gt; Japan\nprint(Country[-2])\n#&gt;&gt;&gt; German\nprint(Country[-3])\n#&gt;&gt;&gt; France\n\n\n使用列表中的值\n\nCodeintro = f\"Hello,I'm from {Country[0]}!\"\nprint(intro)\n#&gt;&gt;&gt; Hello,I'm from China!"
  },
  {
    "objectID": "02list.html#修改添加和删除元素",
    "href": "02list.html#修改添加和删除元素",
    "title": "\n7  列表list\n",
    "section": "\n7.2 修改、添加和删除元素",
    "text": "7.2 修改、添加和删除元素\n\n7.2.1 修改元素\n\nCodenum = [1,2,3,4,5,6,7,8,9]\nprint(num)\n#&gt;&gt;&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nnum[0] = 0\nprint(num)\n#&gt;&gt;&gt; [0, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n7.2.2 添加元素\n\n\n在列表末尾添加元素\n追加（append()）到列表末尾\n\nCodenum = [1,2,3,4,5,6,7,8,9]\nprint(num)\n#&gt;&gt;&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nnum.append(10)\nprint(num)\n#&gt;&gt;&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n可以先创建空列表，再用append逐个添加元素。\n\nCodefruit = []\nfruit.append(\"apple\")\nfruit.append(\"pear\")\n\nprint(fruit)\n#&gt;&gt;&gt; ['apple', 'pear']\n\n\n\n\n在列表中插入元素\n使用insert()方法可在列表的任意位置添加元素\n\nCodenum = [1,2,3,4,5,6,7,8,9]\nprint(num)\n#&gt;&gt;&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnum.insert(0,0)\nnum\n#&gt;&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n7.2.3 删除元素\n\n\n使用del 语句删除元素\n\nCodenum = [1,2,3,4,5,6,7,8,9]\n\ndel num[0]\ndel num[2]\nnum\n#&gt;&gt;&gt; [2, 3, 5, 6, 7, 8, 9]\n\n\n\n\n使用pop()方法删除元素\n弹出pop() 方法删除列表末尾的元素\n\nCodenum = [1,2,3,4,5,6,7,8,9]\npopped_num = num.pop()\nnum\n#&gt;&gt;&gt; [1, 2, 3, 4, 5, 6, 7, 8]\npopped_num\n#&gt;&gt;&gt; 9\n\n\n\n\n删除任意位置的元素\n也可以使用pop()方法删除列表中任意位置的元素，指定索引即可\n\nCodenum = [1,2,3,4,5,6,7,8,9]\nfifth_num = num.pop(4)\nnum\n#&gt;&gt;&gt; [1, 2, 3, 4, 6, 7, 8, 9]\n\n\n\n\n根据值删除元素\n\nCodenum = [1,2,3,4,5,6,7,8,9]\nhate_num = 4\nnum.remove(hate_num)\nnum\n#&gt;&gt;&gt; [1, 2, 3, 5, 6, 7, 8, 9]"
  },
  {
    "objectID": "02list.html#管理列表",
    "href": "02list.html#管理列表",
    "title": "\n7  列表list\n",
    "section": "\n7.3 管理列表",
    "text": "7.3 管理列表\n\n\n使用sort()方法永久排序\n\nCode### 字母顺序\nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nletters.sort()\nprint(letters)\n#&gt;&gt;&gt; ['a', 'k', 'n', 'r', 'v', 'z']\n\n### 字母逆序\nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nletters.sort(reverse = True)\nprint(letters)\n#&gt;&gt;&gt; ['z', 'v', 'r', 'n', 'k', 'a']\n\n\n\n\n使用sorted()函数临时排序\n\nCodeletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nsorted(letters)\n#&gt;&gt;&gt; ['a', 'k', 'n', 'r', 'v', 'z']\nsorted(letters,reverse = True)\n#&gt;&gt;&gt; ['z', 'v', 'r', 'n', 'k', 'a']\nprint(letters)\n#&gt;&gt;&gt; ['a', 'r', 'k', 'n', 'v', 'z']\n\n\n\n\n使用reverse()方法反向打印列表\n\nCodeletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nletters.reverse()\nprint(letters) #反向打印\n#&gt;&gt;&gt; ['z', 'v', 'n', 'k', 'r', 'a']\nletters.reverse()\nprint(letters) #恢复\n#&gt;&gt;&gt; ['a', 'r', 'k', 'n', 'v', 'z']\n\n\n\n\n使用len()函数确定列表长度\n\nCodeletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nlen(letters)\n#&gt;&gt;&gt; 6"
  },
  {
    "objectID": "02list.html#遍历整个列表",
    "href": "02list.html#遍历整个列表",
    "title": "\n7  列表list\n",
    "section": "\n7.4 遍历整个列表",
    "text": "7.4 遍历整个列表\nfor循环\n注意避免缩进错误，如忘记缩进、忘记缩进额外的代码行、不必要的缩进、循环后不必要的缩进、遗漏冒号、\n\nCodesubjects = [\"Chinese\",\"Mathematics\",\"English\",\"Physics\",\"Chemistry\",\"Biology\"]\nfor subject in subjects:\n  print(f\"{subject}:\")\n  print(f\"{subject} is very important for students.\\n\")\n#&gt;&gt;&gt; Chinese:\n#&gt;&gt;&gt; Chinese is very important for students.\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; Mathematics:\n#&gt;&gt;&gt; Mathematics is very important for students.\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; English:\n#&gt;&gt;&gt; English is very important for students.\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; Physics:\n#&gt;&gt;&gt; Physics is very important for students.\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; Chemistry:\n#&gt;&gt;&gt; Chemistry is very important for students.\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; Biology:\n#&gt;&gt;&gt; Biology is very important for students.\nprint(\"day day up!\")\n#&gt;&gt;&gt; day day up!"
  },
  {
    "objectID": "02list.html#创建数值列表",
    "href": "02list.html#创建数值列表",
    "title": "\n7  列表list\n",
    "section": "\n7.5 创建数值列表",
    "text": "7.5 创建数值列表\n\n7.5.1 使用range()函数创建列表\n\nCodefor value in range(-3,3):\n  print(value)\n#&gt;&gt;&gt; -3\n#&gt;&gt;&gt; -2\n#&gt;&gt;&gt; -1\n#&gt;&gt;&gt; 0\n#&gt;&gt;&gt; 1\n#&gt;&gt;&gt; 2\n\n\n\nCode\nnumbers = list(range(-5,5,2))\nnumbers\n#&gt;&gt;&gt; [-5, -3, -1, 1, 3]\n\n\nsquares = []\nfor value in range(1,11):\n  square=value**2\n  squares.append(square)\nprint(squares)\n#&gt;&gt;&gt; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\n\n7.5.2 统计函数\n\nCodedigits = list(range(0,10))\nmin(digits)\n#&gt;&gt;&gt; 0\nmax(digits)\n#&gt;&gt;&gt; 9\nsum(digits)\n#&gt;&gt;&gt; 45\n\n\n\n7.5.3 列表推导式list comprehension\n\nCodesquares = [i**2 for i in range(1,10)]\nsquares\n#&gt;&gt;&gt; [1, 4, 9, 16, 25, 36, 49, 64, 81]"
  },
  {
    "objectID": "02list.html#slice",
    "href": "02list.html#slice",
    "title": "\n7  列表list\n",
    "section": "\n7.6 slice",
    "text": "7.6 slice\n列表的部分称为slice。\n\nCodeletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n# 左包含，右不包含\nletters[0:3] \n#&gt;&gt;&gt; ['a', 'r', 'k']\nletters[3:5]  \n#&gt;&gt;&gt; ['n', 'v']\nletters[:3]    # 0，1，2\n#&gt;&gt;&gt; ['a', 'r', 'k']\nletters[:-2]   # 从头到倒数第2之前1位\n#&gt;&gt;&gt; ['a', 'r', 'k', 'n']\nletters[2:]    # 从第3到末尾\n#&gt;&gt;&gt; ['k', 'n', 'v', 'z']\nletters[-3:]   # 从倒数第3到末尾\n#&gt;&gt;&gt; ['n', 'v', 'z']\n\nletters[::2] # 从头到尾每间隔2打印\n#&gt;&gt;&gt; ['a', 'k', 'v']\nletters[1::3]\n#&gt;&gt;&gt; ['r', 'v']\n\n\n\n\n# 遍历slice\n\nfor i in letters[:3]:\n  i.upper()\n#&gt;&gt;&gt; 'A'\n#&gt;&gt;&gt; 'R'\n#&gt;&gt;&gt; 'K'\n  \n\n# 复制slice\n字母 = letters[:]  # 从头到尾\n字母.append(\"X\")\n字母\n#&gt;&gt;&gt; ['a', 'r', 'k', 'n', 'v', 'z', 'X']\nletters.append(\"Y\")\nletters\n#&gt;&gt;&gt; ['a', 'r', 'k', 'n', 'v', 'z', 'Y']\n\n#不使用slice   \nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nletters\n#&gt;&gt;&gt; ['a', 'r', 'k', 'n', 'v', 'z']\nLETTERS = letters         # 两种指向同一个列表\nLETTERS.append(\"X\")\nLETTERS\n#&gt;&gt;&gt; ['a', 'r', 'k', 'n', 'v', 'z', 'X']\nletters\n#&gt;&gt;&gt; ['a', 'r', 'k', 'n', 'v', 'z', 'X']\nletters.append(\"Y\")     \nLETTERS\n#&gt;&gt;&gt; ['a', 'r', 'k', 'n', 'v', 'z', 'X', 'Y']\nletters\n#&gt;&gt;&gt; ['a', 'r', 'k', 'n', 'v', 'z', 'X', 'Y']"
  },
  {
    "objectID": "02list.html#元组tuple",
    "href": "02list.html#元组tuple",
    "title": "\n7  列表list\n",
    "section": "\n7.7 元组tuple",
    "text": "7.7 元组tuple\nPython将不能修改的值称为不可变的。而不可变的列表称为元组（tuple）。元组使用圆括号()+逗号,标识。严格地说，元组是用逗号标识的，圆括号只是让元组看起来更整洁、更清晰，并不是必须的。\n\nCodedimensions = (200,50,4)\ndimensions\n#&gt;&gt;&gt; (200, 50, 4)\n# dimensions[0] = 333 # 'tuple' object does not support item assignment\n\nsingle = 9,\n# single[0] = 3\n\n\n虽然元组的元素不能修改，但可以重新给表示元组的变量赋值\n\nCodedimensions = (200,50,4)\ndimensions\n#&gt;&gt;&gt; (200, 50, 4)\ndimensions = 2,3,4,5\ndimensions\n#&gt;&gt;&gt; (2, 3, 4, 5)\nfor i in dimensions:\n  i\n#&gt;&gt;&gt; 2\n#&gt;&gt;&gt; 3\n#&gt;&gt;&gt; 4\n#&gt;&gt;&gt; 5"
  },
  {
    "objectID": "03dictionary.html",
    "href": "03dictionary.html",
    "title": "\n8  字典\n",
    "section": "",
    "text": "9 默认遍历键\nfor i in like_language: print(f”Key:{i.title()}“)"
  },
  {
    "objectID": "03dictionary.html#操纵字典",
    "href": "03dictionary.html#操纵字典",
    "title": "\n8  字典\n",
    "section": "\n8.1 操纵字典",
    "text": "8.1 操纵字典\n\n8.1.1 访问值\n\nCodealien_0[\"color\"]\n#&gt;&gt;&gt; 'green'\nalien_0[\"points\"]\n#&gt;&gt;&gt; 5\n\n\n\n8.1.2 添加键值对\n\nCodealien_0[\"x\"] = 0\nalien_0[\"y\"] = 25\nalien_0\n#&gt;&gt;&gt; {'color': 'green', 'points': 5, 'x': 0, 'y': 25}\n\n\n\n8.1.3 从空字典开始\n\nCodealien_0 = {}\nalien_0[\"color\"] = \"green\"\nalien_0[\"points\"] = 5\n\nalien_0\n#&gt;&gt;&gt; {'color': 'green', 'points': 5}\n\n\n\n8.1.4 修改\n\nCodealien_0[\"color\"] =[ \"yellow\",\"red\",\"blue\"]\nalien_0\n#&gt;&gt;&gt; {'color': ['yellow', 'red', 'blue'], 'points': 5}\n\n\n\n8.1.5 删除\n\nCodealien_0 = {\"color\":\"green\",\"points\":5}\n\ndel alien_0[\"points\"]\nalien_0\n#&gt;&gt;&gt; {'color': 'green'}\n\n\n\n8.1.6 由类似的对象组成的字典\n\nCodelike_language={\n    \"jen\":\"python\",\n    \"sarah\":\"c\",\n    \"edward\":\"r\",\n    \"phil\":\"python\",\n    }\nlike_language\n#&gt;&gt;&gt; {'jen': 'python', 'sarah': 'c', 'edward': 'r', 'phil': 'python'}\n\n\n\n8.1.7 get()方法访问值\n\nCodealien_0[\"speed\"]\n#&gt;&gt;&gt; Traceback (most recent call last):\n#&gt;&gt;&gt;   File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n#&gt;&gt;&gt; KeyError: 'speed'\n\n\nget()方法第一个参数用于指定键key，第二个参数为指定键不存在时的返回值。\n\nCodealien_0 = {\"color\":\"green\",\"points\":5}\nalien_0.get(\"color\")\n#&gt;&gt;&gt; 'green'\nalien_0.get(\"speed\",\"Error,no existing\")\n#&gt;&gt;&gt; 'Error,no existing'"
  },
  {
    "objectID": "03dictionary.html#遍历字典",
    "href": "03dictionary.html#遍历字典",
    "title": "\n8  字典\n",
    "section": "\n8.2 遍历字典",
    "text": "8.2 遍历字典\n\n8.2.1 遍历所有键值对\nDict.items()\n\nCodelike_language={\n    \"jen\":\"python\",\n    \"sarah\":\"c\",\n    \"edward\":\"r\",\n    \"phil\":\"python\",\n    }\nlike_language.items()\n#&gt;&gt;&gt; dict_items([('jen', 'python'), ('sarah', 'c'), ('edward', 'r'), ('phil', 'python')])\n\nfor i,j in like_language.items():\n    print(f\"Key:{i}\")\n    print(f\"Value:{j}\")\n    print(f\"{i.title()}'s favorite language is {j.title()}.\\n\")\n#&gt;&gt;&gt; Key:jen\n#&gt;&gt;&gt; Value:python\n#&gt;&gt;&gt; Jen's favorite language is Python.\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; Key:sarah\n#&gt;&gt;&gt; Value:c\n#&gt;&gt;&gt; Sarah's favorite language is C.\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; Key:edward\n#&gt;&gt;&gt; Value:r\n#&gt;&gt;&gt; Edward's favorite language is R.\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; Key:phil\n#&gt;&gt;&gt; Value:python\n#&gt;&gt;&gt; Phil's favorite language is Python.\n\n\n\n8.2.2 遍历所有键\nDict.keys()\n\nCodelike_language.keys()\n#&gt;&gt;&gt; dict_keys(['jen', 'sarah', 'edward', 'phil'])\n\nfor i in like_language.keys():\n    print(f\"Key:{i.title()}\")\n#&gt;&gt;&gt; Key:Jen\n#&gt;&gt;&gt; Key:Sarah\n#&gt;&gt;&gt; Key:Edward\n#&gt;&gt;&gt; Key:Phil\n\n\n\n\n\n\n\n\nNote\n\n\n\n默认遍历使用键\n\nCodefor i in like_language: \n    print(f\"Key:{i.title()}\")\n#&gt;&gt;&gt; Key:Jen\n#&gt;&gt;&gt; Key:Sarah\n#&gt;&gt;&gt; Key:Edward\n#&gt;&gt;&gt; Key:Phil\n\n\n\n\n\n8.2.3"
  },
  {
    "objectID": "03dictionary.html#嵌套",
    "href": "03dictionary.html#嵌套",
    "title": "\n8  字典\n",
    "section": "\n9.1 嵌套",
    "text": "9.1 嵌套\n\n9.1.1 字典列表\n列表的每个元素是一个字典\n\nCodealien_0 = {'color': 'green', 'points': 5}\nalien_1 = {'color': 'yellow', 'points': 10} \nalien_2 = {'color': 'red', 'points': 15}\naliens = [alien_0, alien_1, alien_2] \nfor alien in aliens: \n    print(alien)\n#&gt;&gt;&gt; {'color': 'green', 'points': 5}\n#&gt;&gt;&gt; {'color': 'yellow', 'points': 10}\n#&gt;&gt;&gt; {'color': 'red', 'points': 15}\n\n\n\n9.1.2 在字典中存储列表\n\nCoder_object = {\n    \"num\":[1,2,3,4,5],\n    \"strings\":[\"qwe\",\"asd\",\"zxc\"],\n    \"bool\":[True,False],\n}\nr_object[\"num\"]\n#&gt;&gt;&gt; [1, 2, 3, 4, 5]\n\n\n\n9.1.3 在字典中存储字典\n\nCodeemail = {\n    \"Tencent\":{\n        \"prefix\":\"3036683293\",\n        \"suffix\":\"@qq.com\",\n        \"state\":\"hardly\"\n    },\n    \"USTC\":{\n        \"prefix\":\"wangal00\",\n        \"suffix\":\"@mail.ustc.edu.cn\",\n        \"state\":\"usually\",\n    },\n    \"Microsoft\":{\n        \"prefix\":\"wanganlin00\",\n        \"suffix\":\"@outlook.com\",\n        \"state\":\"often\",\n    },\n    \"Google\":{\n        \"prefix\":\"wanganlin00\",\n        \"suffix\":\"@gmail.com\",\n        \"state\":\"can't\",\n    },\n}\nfor i,j in email.items():\n    print(f\"Belongs to {i}:\")\n    print(f'My email is {j[\"prefix\"]}{j[\"suffix\"]} , I {j[\"state\"]} use it.\\n')\n#&gt;&gt;&gt; Belongs to Tencent:\n#&gt;&gt;&gt; My email is 3036683293@qq.com , I hardly use it.\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; Belongs to USTC:\n#&gt;&gt;&gt; My email is wangal00@mail.ustc.edu.cn , I usually use it.\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; Belongs to Microsoft:\n#&gt;&gt;&gt; My email is wanganlin00@outlook.com , I often use it.\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; Belongs to Google:\n#&gt;&gt;&gt; My email is wanganlin00@gmail.com , I can't use it."
  },
  {
    "objectID": "control_structure.html#if-语句",
    "href": "control_structure.html#if-语句",
    "title": "\n9  Control structure\n",
    "section": "\n9.1 if 语句",
    "text": "9.1 if 语句\n\n9.1.1 if语句\nif conditional_test1:\n    do something\nif conditional_test2:\n    do something\n......\nif conditional_testn:\n    do something\n\n9.1.2 if-else 语句\nif conditional_test:\n    do something\nelse:\n    do anotherthing\n\n9.1.3 if-elif-else 语句\nelse:可省略\nif conditional_test1:\n    do something\nelif conditional_test2:\n    do something\n......\nelif condtional_testn:\n    do something\nelse:\n    do otherthings\n\nCodecars = [\"audi\",\"bmW\",\"subaru\",\"toyota\"] \nfor i in cars: \n    if i.lower()=='bmw': \n        i.upper() \n    else: \n        i.title()\n#&gt;&gt;&gt; 'Audi'\n#&gt;&gt;&gt; 'BMW'\n#&gt;&gt;&gt; 'Subaru'\n#&gt;&gt;&gt; 'Toyota'\n\n\n与 and、或or\n\nCodeages = [17,34,29,18,46,55,9,60,35,14,56,64] \nstate = [] \nfor i in ages: \n    if i &lt;18: \n        state.append(\"young\") \n    elif i&gt;=18 and i&lt;60: \n        state.append(\"adult\") \n    else: \n        state.append(\"elder\") \nstate\n#&gt;&gt;&gt; ['young', 'adult', 'adult', 'adult', 'adult', 'adult', 'young', 'elder', 'adult', 'young', 'adult', 'elder']\n\n\n在或不在 in、not in\n\nCodeusers = [\"小米\",\"小亮\",\"小美\",\"小明\",\"小帅\"]\n\nuser1 = \"小美\" \nif user1 in users:\n    print(f\"欢迎光临,{user1}!\")\n#&gt;&gt;&gt; 欢迎光临,小美!\nuser2 = \"小花\"\nif user2 not in users:\n    print(f\"请加入我们，{user2}!\")\n#&gt;&gt;&gt; 请加入我们，小花!\n\n\n\n9.1.4 确定列表非空\n对于数值0，空值None，单引号空字符串''，双引号空字符串\"\"，空列表[]，空元组()，空字典{}，python都会返回False。\n\nCodeusers = []\n\nif users:\n    for i in users:\n        print(f\"欢迎光临,{i}!\")\nelse:\n    print(\"无人使用\")\n#&gt;&gt;&gt; 无人使用\n\n\n\n9.1.5 使用多个列表\n\nCodeinvited = [\"A\",\"S\",\"D\",\"F\",\"G\",\"H\",\"J\",\"K\"]\npresent = [\"A\",\"F\",\"Z\",\"X\",\"K\",\"C\"]\n\nfor pre in present:\n    if pre in invited:\n        print(f\"欢迎您的到来，{pre}先生/女士！\")\n    else:\n        print(f\"抱歉，{pre}先生/女士，你没有请柬，无法进入。\")\n#&gt;&gt;&gt; 欢迎您的到来，A先生/女士！\n#&gt;&gt;&gt; 欢迎您的到来，F先生/女士！\n#&gt;&gt;&gt; 抱歉，Z先生/女士，你没有请柬，无法进入。\n#&gt;&gt;&gt; 抱歉，X先生/女士，你没有请柬，无法进入。\n#&gt;&gt;&gt; 欢迎您的到来，K先生/女士！\n#&gt;&gt;&gt; 抱歉，C先生/女士，你没有请柬，无法进入。\nprint(\"\\n 欢迎\")\n#&gt;&gt;&gt; \n#&gt;&gt;&gt;  欢迎"
  },
  {
    "objectID": "control_structure.html#while循环",
    "href": "control_structure.html#while循环",
    "title": "\n9  Control structure\n",
    "section": "\n9.2 while循环",
    "text": "9.2 while循环\n\nCodei=0\nwhile i&lt;=9:\n    print(i)\n    i=i+1\n#&gt;&gt;&gt; 0\n#&gt;&gt;&gt; 1\n#&gt;&gt;&gt; 2\n#&gt;&gt;&gt; 3\n#&gt;&gt;&gt; 4\n#&gt;&gt;&gt; 5\n#&gt;&gt;&gt; 6\n#&gt;&gt;&gt; 7\n#&gt;&gt;&gt; 8\n#&gt;&gt;&gt; 9\n\n\n\n9.2.1 用户选择退出循环\n\nCodeprompt = \"\\n 输入一条消息，我将会复述一遍:\\n 输入 quit 结束程序。\"\nmessage = \"\"\nwhile message != 'quit':\n    message = input(prompt)\n    if message !='quit':\n        print(message)\n\n\n\n9.2.2 使用标志flag\n\nCodeprompt = \"\\n 输入一条消息，我将会复述一遍:\\n 输入 quit 结束程序。\"\nactive = True\nwhile active:\n    message = input(prompt)\n    if message !='quit':\n        print(message)\n    else:\n        active =False\n\n\n\n9.2.3 使用break退出循环\n\nCodeprompt = \"\\n 输入一条消息，我将会复述一遍:\\n 输入 quit 结束程序。\"\nwhile True:\n    message = input(prompt)\n    if message !='quit':\n        print(message)\n    else:\n        break\n\n\n\n9.2.4 在循环中使用continue\n\nCodei=0\nwhile i &lt;10:\n    i=i+1\n    if i%2 ==0:\n        continue\n    print(i)\n#&gt;&gt;&gt; 1\n#&gt;&gt;&gt; 3\n#&gt;&gt;&gt; 5\n#&gt;&gt;&gt; 7\n#&gt;&gt;&gt; 9\n\n\n\n9.2.5 使用while循环处理列表和字典\n\n9.2.5.1 在列表之间移动元素\n\nCode# 首先，创建一个待验证用户列表 \n# 和一个用于存储已验证用户的空列表\nunconfirmed_users = ['alice', 'brian', 'candace'] \nconfirmed_users = [] \n\n# 验证每个用户，直到没有未验证用户为止\n# 将每个经过验证的用户都移到已验证用户列表中\nwhile unconfirmed_users:\n    current_user = unconfirmed_users.pop() \n    print(f\"Verifying user: {current_user.title()}\")\n    confirmed_users.append(current_user) \n#&gt;&gt;&gt; Verifying user: Candace\n#&gt;&gt;&gt; Verifying user: Brian\n#&gt;&gt;&gt; Verifying user: Alice\n    \n# 显示所有的已验证用户 \nprint(\"\\nThe following users have been confirmed:\") \n#&gt;&gt;&gt; \n#&gt;&gt;&gt; The following users have been confirmed:\nfor confirmed_user in confirmed_users: \n    print(confirmed_user.title())\n#&gt;&gt;&gt; Candace\n#&gt;&gt;&gt; Brian\n#&gt;&gt;&gt; Alice\n\n\n\n9.2.5.2 删除所有特定值\n\nCodepets = ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']\nprint(pets)\n#&gt;&gt;&gt; ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']\nwhile 'cat' in pets: \n    pets.remove('cat')\nprint(pets)\n#&gt;&gt;&gt; ['dog', 'dog', 'goldfish', 'rabbit']\n\n\n\n9.2.5.3 让用户填充字典\n\nCode# 调查程序\nresponses = {}\nflag = True\n\n\nwhile flag:\n    # 提示被调查者输入性名和回答,存储在字典中\n    name = input(\"\\n What is your name?\")\n    response = input(\"What is your favorite fruit?\")\n    responses[name] = response\n    \n    repeat = input(\"Whether to move on to the next person (yes/no)\")\n    if repeat == \"no\":\n        flag = False\n\nprint(\"\\n ---Results---\")\nfor i,j in responses.items():\n        print(f\"{i}'s favorite fruit is {j}.\")"
  },
  {
    "objectID": "function.html#定义函数",
    "href": "function.html#定义函数",
    "title": "\n10  函数\n",
    "section": "\n10.1 定义函数",
    "text": "10.1 定义函数\n\n10.1.1 传参\n\nCodedef greet_user(username):\n    \"\"\"文档字符串（docstring）\"\"\"\n    print(f\"Hello,{username.title()}\")\n\ngreet_user(\"lily\")\n#&gt;&gt;&gt; Hello,Lily\n\n\n\n10.1.2 形参（parameter）和实参（argument）\n形参即函数完成任务所需要的信息，例如greet_user(username)中的username。\n实参即在调用call 函数时传递给函数的信息，例如greet_user(\"lily\")中的\"lily\"。\n位置实参 关键字实参 默认值，在给形参指定默认值时，等号两边不要出现空格，函数调用中的关键字实参也遵循这种约定。"
  },
  {
    "objectID": "function.html#返回值",
    "href": "function.html#返回值",
    "title": "\n10  函数\n",
    "section": "\n10.2 返回值",
    "text": "10.2 返回值\n\n10.2.1 返回字典\n实参可选\n\nCodedef get_formatted_name(first_name, last_name, middle_name=''):\n    \"\"\"返回标准格式的姓名\"\"\"\n    if middle_name: \n        full_name = f\"{first_name} {middle_name} {last_name}\"\n    else: \n        full_name = f\"{first_name} {last_name}\" \n    return full_name.title() \n\nmusician = get_formatted_name('jimi', 'hendrix') \nprint(musician) \n#&gt;&gt;&gt; Jimi Hendrix\nmusician = get_formatted_name('john', 'hooker', 'lee') \nprint(musician)\n#&gt;&gt;&gt; John Lee Hooker\n\n\n\nCodedef build_person(first_name,last_name,age=None):\n    \"\"\" 返回字典，其中包含姓名或年龄\"\"\"\n    person = {\"first\": first_name,\"last\":last_name}\n    \n    if age:\n        person[\"age\"] = age\n    return person\nmusician = build_person('jimi', 'hendrix',27) \nprint(musician) \n#&gt;&gt;&gt; {'first': 'jimi', 'last': 'hendrix', 'age': 27}"
  },
  {
    "objectID": "function.html#传递列表",
    "href": "function.html#传递列表",
    "title": "\n10  函数\n",
    "section": "\n10.3 传递列表",
    "text": "10.3 传递列表\n\nCode# 函数\ndef print_models(unprinted_designs, completed_models): \n    \"\"\" 模拟打印每个设计，直到没有未打印的设计为止\n    打印每个设计后，都将其移到列表 completed_models 中 \"\"\" \n    while unprinted_designs: \n        current_design = unprinted_designs.pop() \n        print(f\"Printing model: {current_design}\") \n        completed_models.append(current_design)\n        \ndef show_completed_models(completed_models): \n    \"\"\"显示打印好的所有模型\"\"\" \n    print(\"\\nThe following models have been printed:\") \n    for completed_model in completed_models: \n        print(completed_model) \n\n# 主程序\nunprinted_designs = ['phone case', 'robot pendant', 'dodecahedron']\ncompleted_models = [] \n\nprint_models(unprinted_designs, completed_models) \n#&gt;&gt;&gt; Printing model: dodecahedron\n#&gt;&gt;&gt; Printing model: robot pendant\n#&gt;&gt;&gt; Printing model: phone case\nshow_completed_models(completed_models)\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; The following models have been printed:\n#&gt;&gt;&gt; dodecahedron\n#&gt;&gt;&gt; robot pendant\n#&gt;&gt;&gt; phone case\n\nunprinted_designs\n#&gt;&gt;&gt; []\ncompleted_models\n#&gt;&gt;&gt; ['dodecahedron', 'robot pendant', 'phone case']\n\n# 主程序 使用列表副本\nunprinted_designs = ['phone case', 'robot pendant', 'dodecahedron']\ncompleted_models = [] \n\nprint_models(unprinted_designs[:], completed_models) \n#&gt;&gt;&gt; Printing model: dodecahedron\n#&gt;&gt;&gt; Printing model: robot pendant\n#&gt;&gt;&gt; Printing model: phone case\nshow_completed_models(completed_models)\n#&gt;&gt;&gt; \n#&gt;&gt;&gt; The following models have been printed:\n#&gt;&gt;&gt; dodecahedron\n#&gt;&gt;&gt; robot pendant\n#&gt;&gt;&gt; phone case\n\nunprinted_designs\n#&gt;&gt;&gt; ['phone case', 'robot pendant', 'dodecahedron']\ncompleted_models\n#&gt;&gt;&gt; ['dodecahedron', 'robot pendant', 'phone case']"
  },
  {
    "objectID": "function.html#传递任意数量的实参",
    "href": "function.html#传递任意数量的实参",
    "title": "\n10  函数\n",
    "section": "\n10.4 传递任意数量的实参",
    "text": "10.4 传递任意数量的实参\n\nCodedef make_pizza(*toppings):\n    \"\"\"打印顾客点的所有配料\"\"\"\n    print(toppings)\n    return toppings\ntps = make_pizza(\"qwe\",\"asd\",\"zxc\")\n#&gt;&gt;&gt; ('qwe', 'asd', 'zxc')\n\n\nPython先匹配位置实参和关键字实参，再将剩余的实参匹配到最后一个形参。*toppings 中的星号 * 创建一个名为 toppings 的元组。\n**user_info中的两个星号 ** 创建一个名为user_info的字典，接收任意数量的关键字实参\n\nCodedef build_profile(first, last, **user_info):\n    \"\"\"创建一个字典，其中包含我们知道的有关用户的一切\"\"\"\n    user_info['first_name'] = first \n    user_info['last_name'] = last \n    return user_info \n\nuser_profile = build_profile('albert', 'einstein', location='princeton', field='physics') \nprint(user_profile)\n#&gt;&gt;&gt; {'location': 'princeton', 'field': 'physics', 'first_name': 'albert', 'last_name': 'einstein'}"
  },
  {
    "objectID": "function.html#模块module",
    "href": "function.html#模块module",
    "title": "\n10  函数\n",
    "section": "\n10.5 模块module",
    "text": "10.5 模块module"
  },
  {
    "objectID": "function.html#导入整个模块",
    "href": "function.html#导入整个模块",
    "title": "\n10  函数\n",
    "section": "\n10.6 导入整个模块",
    "text": "10.6 导入整个模块\nimport module_name\nmodule_name.function_name()"
  },
  {
    "objectID": "function.html#使用as给模块指定别名",
    "href": "function.html#使用as给模块指定别名",
    "title": "\n10  函数\n",
    "section": "\n10.7 使用as给模块指定别名",
    "text": "10.7 使用as给模块指定别名\nimport module_name as mn\nmn.function_name()"
  },
  {
    "objectID": "function.html#导入特定函数",
    "href": "function.html#导入特定函数",
    "title": "\n10  函数\n",
    "section": "\n10.8 导入特定函数",
    "text": "10.8 导入特定函数\nfrom module_name import function_name\nfunction_name()"
  },
  {
    "objectID": "function.html#使用as给函数指定别名",
    "href": "function.html#使用as给函数指定别名",
    "title": "\n10  函数\n",
    "section": "\n10.9 使用as给函数指定别名",
    "text": "10.9 使用as给函数指定别名\nfrom module_name import function_name as fn\nfn()"
  },
  {
    "objectID": "function.html#使用-导入模块中使用函数",
    "href": "function.html#使用-导入模块中使用函数",
    "title": "\n10  函数\n",
    "section": "\n10.10 使用* 导入模块中使用函数",
    "text": "10.10 使用* 导入模块中使用函数\n不建议，同名覆盖\nfrom module_name import *"
  },
  {
    "objectID": "class.html#定义类和方法",
    "href": "class.html#定义类和方法",
    "title": "\n11  类class\n",
    "section": "\n11.1 定义类和方法",
    "text": "11.1 定义类和方法\n\nCodeclass Car:\n    \"\"\"表示汽车的类，存储有关汽车的信息 \"\"\"\n    def __init__(self, make, model, year): \n        \"\"\"初始化描述汽车的属性\"\"\" \n        self.make = make \n        self.model = model \n        self.year = year \n        self.odometer_reading = 0  # 给属性指定默认值\n    def get_descriptive_name(self): \n        \"\"\"返回格式规范的描述性信息\"\"\" \n        long_name = f\"{self.year} {self.make} {self.model}\" \n        return long_name.title() \n    def read_odometer(self):\n        \"\"\"打印汽车行驶里程\"\"\"\n        print(f\"This car has {self.odometer_reading} miles on it.\")\n    def update_odometer(self,mileage):\n        \"\"\"更新里程数\n           禁止回调\n        \"\"\"\n        if mileage &gt;= self.odometer_reading:\n            self.odometer_reading = mileage\n        else:\n            print(\"错误！禁止回调！！！\")\n\nmy_new_car = Car('audi', 'a4', 2024)\n\n# 访问属性\nmy_new_car.make\n#&gt;&gt;&gt; 'audi'\nmy_new_car.odometer_reading\n#&gt;&gt;&gt; 0\n\n# 调用方法\nprint(my_new_car.get_descriptive_name())\n#&gt;&gt;&gt; 2024 Audi A4\nmy_new_car.read_odometer() \n#&gt;&gt;&gt; This car has 0 miles on it.\n\n\n\n11.1.1 修改属性的值\n\nCode# 直接修改属性的值\nmy_new_car.odometer_reading = 55\nmy_new_car.odometer_reading\n#&gt;&gt;&gt; 55\n\n# 通过方法修改\nmy_new_car.update_odometer(100)\nmy_new_car.odometer_reading\n#&gt;&gt;&gt; 100\nmy_new_car.update_odometer(24)\n#&gt;&gt;&gt; 错误！禁止回调！！！"
  },
  {
    "objectID": "class.html#继承inheritance",
    "href": "class.html#继承inheritance",
    "title": "\n11  类class\n",
    "section": "\n11.2 继承inheritance",
    "text": "11.2 继承inheritance\n原有的类称为父类（parent class），新类称为子类（child class）"
  }
]