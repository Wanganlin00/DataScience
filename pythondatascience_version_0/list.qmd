# 列表

在Python中，用方括号`[]` 表示列表，用逗号分隔其中的元素。

```{python}
Country = ["China",'USA',"UK","France","German","Japan"]
print(Country)
```

## 访问元素

索引从0开始，而不是从1开始。

```{python}
print(Country[0])
print(Country[4])
```

也可以从倒数第一个数向前访问

```{python}
print(Country[-1])
print(Country[-2])
print(Country[-3])
```

使用列表中的值

```{python}
intro = f"Hello,I'm from {Country[0]}!"
print(intro)
```

## 修改、添加和删除元素

### 修改元素

```{python}
num = [1,2,3,4,5,6,7,8,9]
print(num)

num[0] = 0
print(num)
```

### 添加元素

1.  **在列表末尾添加元素**

    追加（`append()`）到列表末尾

    ```{python}
    num = [1,2,3,4,5,6,7,8,9]
    print(num)

    num.append(10)
    print(num)
    ```

    可以先创建空列表，再用`append`逐个添加元素。

    ```{python}
    fruit = []
    fruit.append("apple")
    fruit.append("pear")

    print(fruit)
    ```

2.  **在列表中插入元素**

    使用`insert()`方法可在列表的任意位置添加元素

    ```{python}
    num = [1,2,3,4,5,6,7,8,9]
    print(num)
    num.insert(0,0)
    num
    ```

### 删除元素

1.  使用del 语句删除元素

    ```{python}
    num = [1,2,3,4,5,6,7,8,9]

    del num[0]
    del num[2]
    num
    ```

2.  使用pop()方法删除元素

    弹出`pop()` 方法删除列表末尾的元素

    ```{python}
    num = [1,2,3,4,5,6,7,8,9]
    popped_num = num.pop()
    num
    popped_num
    ```

3.  删除任意位置的元素

    也可以使用`pop()`方法删除列表中任意位置的元素，指定索引即可

    ```{python}
    num = [1,2,3,4,5,6,7,8,9]
    fifth_num = num.pop(4)
    num
    ```

4.  根据值删除元素

    ```{python}
    num = [1,2,3,4,5,6,7,8,9]
    hate_num = 4
    num.remove(hate_num)
    num
    ```

## 管理列表

1.  使用`sort()`方法永久排序

    ```{python}
    ### 字母顺序
    letters = ["a","r","k","n","v","z"]
    letters.sort()
    print(letters)

    ### 字母逆序
    letters = ["a","r","k","n","v","z"]
    letters.sort(reverse = True)
    print(letters)
    ```

2.  使用`sorted()`函数临时排序

    ```{python}
    letters = ["a","r","k","n","v","z"]
    sorted(letters)
    sorted(letters,reverse = True)
    print(letters)
    ```

3.  使用`reverse()`方法反向打印列表

    ```{python}
    letters = ["a","r","k","n","v","z"]
    letters.reverse()
    print(letters) #反向打印
    letters.reverse()
    print(letters) #恢复
    ```

4.  使用`len()`函数确定列表长度

    ```{python}
    letters = ["a","r","k","n","v","z"]
    len(letters)
    ```

## 遍历整个列表

`for`循环

注意避免缩进错误，如忘记缩进、忘记缩进额外的代码行、不必要的缩进、循环后不必要的缩进、遗漏冒号、

```{python}
subjects = ["Chinese","Mathematics","English","Physics","Chemistry","Biology"]
for subject in subjects:
  print(f"{subject}:")
  print(f"{subject} is very important for students.\n")
print("day day up!")
```

## 创建数值列表

### 使用`range()`函数创建列表

```{python}
for value in range(-3,3):
  print(value)
```

```{python}

numbers = list(range(-5,5,2))
numbers


squares = []
for value in range(1,11):
  square=value**2
  squares.append(square)
print(squares)
```

### 统计函数

```{python}
digits = list(range(0,10))
min(digits)
max(digits)
sum(digits)
```

### 列表推导式list comprehension

```{python}
squares = [i**2 for i in range(1,10)]
squares
```

## slice

列表的部分称为**slice**。

```{python}
letters = ["a","r","k","n","v","z"]
# 左包含，右不包含
letters[0:3] 
letters[3:5]  
letters[:3]    # 0，1，2
letters[:-2]   # 从头到倒数第2之前1位
letters[2:]    # 从第3到末尾
letters[-3:]   # 从倒数第3到末尾

letters[::2] # 从头到尾每间隔2打印
letters[1::3]




# 遍历slice

for i in letters[:3]:
  i.upper()
  

# 复制slice
字母 = letters[:]  # 从头到尾
字母.append("X")
字母
letters.append("Y")
letters

#不使用slice   
letters = ["a","r","k","n","v","z"]
letters
LETTERS = letters         # 两种指向同一个列表
LETTERS.append("X")
LETTERS
letters
letters.append("Y")     
LETTERS
letters

```

## 元组tuple

Python将不能修改的值称为**不可变的**。而不可变的列表称为**元组（tuple）**。元组使用圆括号`()`+逗号`,`标识。严格地说，元组是用逗号标识的，圆括号只是让元组看起来更整洁、更清晰，并不是必须的。

```{python}
dimensions = (200,50,4)
dimensions
# dimensions[0] = 333 # 'tuple' object does not support item assignment

single = 9,
# single[0] = 3
```

虽然元组的元素不能修改，但可以重新给表示元组的变量赋值

```{python}
dimensions = (200,50,4)
dimensions
dimensions = 2,3,4,5
dimensions
for i in dimensions:
  i
```
