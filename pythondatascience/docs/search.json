[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Data Science",
    "section": "",
    "text": "参考资料\n\nPyPi\npandas\nnumpy\nbiopython\nscanpy\nAnaconda\nPytorch",
    "crumbs": [
      "参考资料"
    ]
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "写在前面",
    "section": "",
    "text": "在 Rstudio Console 中交互式运行 Python\nCodelibrary(reticulate)\npy_config()\n\nreticulate::repl_python()",
    "crumbs": [
      "写在前面"
    ]
  },
  {
    "objectID": "preface.html#在-rstudio-console-中交互式运行-python",
    "href": "preface.html#在-rstudio-console-中交互式运行-python",
    "title": "写在前面",
    "section": "",
    "text": "reticulate::repl_python () read-eval-print-loop (REPL)\nexit / quit 退出 Python 环境",
    "crumbs": [
      "写在前面"
    ]
  },
  {
    "objectID": "preface.html#python包管理工具",
    "href": "preface.html#python包管理工具",
    "title": "写在前面",
    "section": "Python包管理工具",
    "text": "Python包管理工具\nPython package index（pypi） 是一个Python编程语言的软件库。\nAnaconda\n环境\npytorch\nD:\ncd anaconda3/envs\nconda create -n pytorch python==3.11.7\nconda acticate pytorch\nconda install pythorch==2.2.0 torchvision==0.17.0 torchaudio==2.2.0 cpuonly -c pytorch\n\n\n\n\ngpt_academic\nD:\ncd anaconda3/envs\nconda create -n gptac-venv python==3.11.7\nconda acticate gptac-venv\ncd gptac-venv \ngit clone --depth==1 url.git\n#复制gpt_academic中的requirements.txt文件到gptac-venv\npython -m pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/\n#修改config.py\ncd gpt_academic\npython main.py\n\n\n\n\nD:\ncd anaconda3/envs/gptac_venv/gpt_academic\n\nconda activate gptac_venv\n\npython main.py\npip\n\n\n\n\n\n\n\n\n\n\npip &lt;command&gt; [options]\n\n\n\n\npip install &lt;module&gt;\npip install SpeechRecognition -i https://pypi.tuna.tsinghua.edu.cn/simple/\n\n\n\npip uninstall &lt;module&gt;\n\n\npip list\n\n\npip --version pip -V\n\n\npython -m pip install --upgrade pip",
    "crumbs": [
      "写在前面"
    ]
  },
  {
    "objectID": "preface.html#环境-1",
    "href": "preface.html#环境-1",
    "title": "写在前面",
    "section": "环境",
    "text": "环境\n\nCodereticulate::py_config()\n#&gt; python:         D:/anaconda3/envs/speech_recognition/python.exe\n#&gt; libpython:      D:/anaconda3/envs/speech_recognition/python311.dll\n#&gt; pythonhome:     D:/anaconda3/envs/speech_recognition\n#&gt; version:        3.11.7 | packaged by conda-forge | (main, Dec 23 2023, 14:27:59) [MSC v.1937 64 bit (AMD64)]\n#&gt; Architecture:   64bit\n#&gt; numpy:           [NOT FOUND]\n#&gt; \n#&gt; NOTE: Python version was forced by RETICULATE_PYTHON_FALLBACK\n\nreticulate::use_python(\"D:/anaconda3/envs/speech_recognition/python.exe\")\n\n\n\nCodereticulate::py_config()\n#&gt; python:         D:/anaconda3/envs/speech_recognition/python.exe\n#&gt; libpython:      D:/anaconda3/envs/speech_recognition/python311.dll\n#&gt; pythonhome:     D:/anaconda3/envs/speech_recognition\n#&gt; version:        3.11.7 | packaged by conda-forge | (main, Dec 23 2023, 14:27:59) [MSC v.1937 64 bit (AMD64)]\n#&gt; Architecture:   64bit\n#&gt; numpy:           [NOT FOUND]\n#&gt; \n#&gt; NOTE: Python version was forced by RETICULATE_PYTHON_FALLBACK\ndevtools::session_info()\n#&gt; ─ Session info ───────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.3.3 (2024-02-29 ucrt)\n#&gt;  os       Windows 10 x64 (build 19045)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language en\n#&gt;  collate  Chinese (Simplified)_China.utf8\n#&gt;  ctype    Chinese (Simplified)_China.utf8\n#&gt;  tz       Asia/Shanghai\n#&gt;  date     2024-04-15\n#&gt;  pandoc   3.1.13 @ D:/anaconda3/envs/speech_recognition/Library/bin/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ───────────────────────────────────────────────────────────────────\n#&gt;  package     * version date (UTC) lib source\n#&gt;  BiocManager * 1.30.22 2023-08-08 [1] CRAN (R 4.3.3)\n#&gt;  cachem        1.0.8   2023-05-01 [1] CRAN (R 4.3.3)\n#&gt;  cellranger    1.1.0   2016-07-27 [1] CRAN (R 4.3.3)\n#&gt;  cli           3.6.2   2023-12-11 [1] CRAN (R 4.3.3)\n#&gt;  codetools     0.2-20  2024-03-31 [1] CRAN (R 4.3.3)\n#&gt;  colorspace    2.1-0   2023-01-23 [1] CRAN (R 4.3.3)\n#&gt;  conflicted  * 1.2.0   2023-02-01 [1] CRAN (R 4.3.3)\n#&gt;  devtools      2.4.5   2022-10-11 [1] CRAN (R 4.3.3)\n#&gt;  digest        0.6.35  2024-03-11 [1] CRAN (R 4.3.3)\n#&gt;  dplyr       * 1.1.4   2023-11-17 [1] CRAN (R 4.3.3)\n#&gt;  ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.3.3)\n#&gt;  evaluate      0.23    2023-11-01 [1] CRAN (R 4.3.3)\n#&gt;  fansi         1.0.6   2023-12-08 [1] CRAN (R 4.3.3)\n#&gt;  fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.3.3)\n#&gt;  forcats     * 1.0.0   2023-01-29 [1] CRAN (R 4.3.3)\n#&gt;  fs            1.6.3   2023-07-20 [1] CRAN (R 4.3.3)\n#&gt;  generics      0.1.3   2022-07-05 [1] CRAN (R 4.3.3)\n#&gt;  ggplot2     * 3.5.0   2024-02-23 [1] CRAN (R 4.3.3)\n#&gt;  glue          1.7.0   2024-01-09 [1] CRAN (R 4.3.3)\n#&gt;  gtable        0.3.4   2023-08-21 [1] CRAN (R 4.3.3)\n#&gt;  here          1.0.1   2020-12-13 [1] CRAN (R 4.3.3)\n#&gt;  hms           1.1.3   2023-03-21 [1] CRAN (R 4.3.3)\n#&gt;  htmltools     0.5.8.1 2024-04-04 [1] CRAN (R 4.3.3)\n#&gt;  htmlwidgets   1.6.4   2023-12-06 [1] CRAN (R 4.3.3)\n#&gt;  httpuv        1.6.15  2024-03-26 [1] CRAN (R 4.3.3)\n#&gt;  jsonlite      1.8.8   2023-12-04 [1] CRAN (R 4.3.3)\n#&gt;  knitr         1.45    2023-10-30 [1] CRAN (R 4.3.3)\n#&gt;  later         1.3.2   2023-12-06 [1] CRAN (R 4.3.3)\n#&gt;  lattice       0.22-6  2024-03-20 [1] CRAN (R 4.3.3)\n#&gt;  lifecycle     1.0.4   2023-11-07 [1] CRAN (R 4.3.3)\n#&gt;  lubridate   * 1.9.3   2023-09-27 [1] CRAN (R 4.3.3)\n#&gt;  magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.3.3)\n#&gt;  Matrix        1.6-5   2024-01-11 [1] CRAN (R 4.3.3)\n#&gt;  memoise       2.0.1   2021-11-26 [1] CRAN (R 4.3.3)\n#&gt;  mime          0.12    2021-09-28 [1] CRAN (R 4.3.1)\n#&gt;  miniUI        0.1.1.1 2018-05-18 [1] CRAN (R 4.3.3)\n#&gt;  munsell       0.5.1   2024-04-01 [1] CRAN (R 4.3.3)\n#&gt;  patchwork   * 1.2.0   2024-01-08 [1] CRAN (R 4.3.3)\n#&gt;  pillar        1.9.0   2023-03-22 [1] CRAN (R 4.3.3)\n#&gt;  pkgbuild      1.4.4   2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;  pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.3.3)\n#&gt;  pkgload       1.3.4   2024-01-16 [1] CRAN (R 4.3.3)\n#&gt;  png           0.1-8   2022-11-29 [1] CRAN (R 4.3.1)\n#&gt;  profvis       0.3.8   2023-05-02 [1] CRAN (R 4.3.3)\n#&gt;  promises      1.3.0   2024-04-05 [1] CRAN (R 4.3.3)\n#&gt;  purrr       * 1.0.2   2023-08-10 [1] CRAN (R 4.3.3)\n#&gt;  R6            2.5.1   2021-08-19 [1] CRAN (R 4.3.3)\n#&gt;  Rcpp          1.0.12  2024-01-09 [1] CRAN (R 4.3.3)\n#&gt;  readr       * 2.1.5   2024-01-10 [1] CRAN (R 4.3.3)\n#&gt;  readxl      * 1.4.3   2023-07-06 [1] CRAN (R 4.3.3)\n#&gt;  remotes       2.5.0   2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;  reticulate    1.35.0  2024-01-31 [1] CRAN (R 4.3.3)\n#&gt;  rlang         1.1.3   2024-01-10 [1] CRAN (R 4.3.3)\n#&gt;  rmarkdown     2.26    2024-03-05 [1] CRAN (R 4.3.3)\n#&gt;  rprojroot     2.0.4   2023-11-05 [1] CRAN (R 4.3.3)\n#&gt;  rstudioapi    0.16.0  2024-03-24 [1] CRAN (R 4.3.3)\n#&gt;  scales        1.3.0   2023-11-28 [1] CRAN (R 4.3.3)\n#&gt;  sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.3.3)\n#&gt;  shiny         1.8.1.1 2024-04-02 [1] CRAN (R 4.3.3)\n#&gt;  stringi       1.8.3   2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;  stringr     * 1.5.1   2023-11-14 [1] CRAN (R 4.3.3)\n#&gt;  tibble      * 3.2.1   2023-03-20 [1] CRAN (R 4.3.3)\n#&gt;  tidyr       * 1.3.1   2024-01-24 [1] CRAN (R 4.3.3)\n#&gt;  tidyselect    1.2.1   2024-03-11 [1] CRAN (R 4.3.3)\n#&gt;  tidyverse   * 2.0.0   2023-02-22 [1] CRAN (R 4.3.3)\n#&gt;  timechange    0.3.0   2024-01-18 [1] CRAN (R 4.3.3)\n#&gt;  tzdb          0.4.0   2023-05-12 [1] CRAN (R 4.3.3)\n#&gt;  urlchecker    1.0.1   2021-11-30 [1] CRAN (R 4.3.3)\n#&gt;  usethis       2.2.3   2024-02-19 [1] CRAN (R 4.3.3)\n#&gt;  utf8          1.2.4   2023-10-22 [1] CRAN (R 4.3.3)\n#&gt;  vctrs         0.6.5   2023-12-01 [1] CRAN (R 4.3.3)\n#&gt;  withr         3.0.0   2024-01-16 [1] CRAN (R 4.3.3)\n#&gt;  writexl     * 1.5.0   2024-02-09 [1] CRAN (R 4.3.3)\n#&gt;  xfun          0.43    2024-03-25 [1] CRAN (R 4.3.3)\n#&gt;  xtable        1.8-4   2019-04-21 [1] CRAN (R 4.3.3)\n#&gt;  yaml          2.3.8   2023-12-11 [1] CRAN (R 4.3.2)\n#&gt; \n#&gt;  [1] D:/R-4.3.3/library\n#&gt; \n#&gt; ─ Python configuration ───────────────────────────────────────────────────────\n#&gt;  python:         D:/anaconda3/envs/speech_recognition/python.exe\n#&gt;  libpython:      D:/anaconda3/envs/speech_recognition/python311.dll\n#&gt;  pythonhome:     D:/anaconda3/envs/speech_recognition\n#&gt;  version:        3.11.7 | packaged by conda-forge | (main, Dec 23 2023, 14:27:59) [MSC v.1937 64 bit (AMD64)]\n#&gt;  Architecture:   64bit\n#&gt;  numpy:           [NOT FOUND]\n#&gt;  \n#&gt;  NOTE: Python version was forced by RETICULATE_PYTHON_FALLBACK\n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "写在前面"
    ]
  },
  {
    "objectID": "R-Python.html",
    "href": "R-Python.html",
    "title": "\n1  R <—> Python\n",
    "section": "",
    "text": "1.1 使用 R 时 reticulate 拥有的互操作性",
    "crumbs": [
      "R <---> Python",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R <---> Python</span>"
    ]
  },
  {
    "objectID": "R-Python.html#使用-r-时-reticulate-拥有的互操作性",
    "href": "R-Python.html#使用-r-时-reticulate-拥有的互操作性",
    "title": "\n1  R <—> Python\n",
    "section": "",
    "text": "Type conversions\n\n\n\n\n\n\nR\nPython\n例\n\n\n\n单元素向量\n标量Scalar\n\n1、 1L、TRUE、\"foo\"\n\n\n\n未命名列表或多元素向量\nList\n\nc(1.0, 2.0, 3.0), c(1L, 2L, 3L)\n\n\n\n命名列表\nDict\n\nlist(a = 1L, b = 2.0), dict(x = x_data)\n\n\n\nMatrix/Array\nNumPy ndarray\nmatrix(c(1,2,3,4), nrow = 2, ncol = 2)\n\n\nData Frame\nPandas DataFrame\ndata.frame(x = c(1,2,3), y = c(\"a\", \"b\", \"c\"))\n\n\nFunction\nPython function\nfunction(x) x + 1\n\n\nNULL, TRUE, FALSE\nNone, True, False\n\nNULL, TRUE, ALSE\n\n\n\n\n\n1.1.1 reticulate 包\n\n\nCodelibrary(reticulate)\n#devtools::install_version( \"ggmap\",  version = \"3.5.2\")\nif(!require(\"tidyverse\")) {\n    utils::install.packages(\"tidyverse\")\n    library(tidyverse)\n}\n\n\n\n1.1.2 R 安装 python 模块\n\nreticulate：安装Python module\n\nCodepy_install(\"pip\")\n# 查看模块是否已安装\npy_module_available('pip')\npy_module_available('numpy')\npy_module_available('pandas')\n\n\n\n1.1.3 R 调用 Python 模块\n\nCode# 调用os模块(module)的listdir()函数\nos &lt;- reticulate::import(\"os\")\nos$listdir(\"./\")\n#&gt;  [1] \"03dictionary_cache\"            \"class_cache\"                  \n#&gt;  [3] \"control_structure_cache\"       \".quarto\"                      \n#&gt;  [5] \"01basic_data_type\"             \"01basic_data_type_cache\"      \n#&gt;  [7] \"02list_cache\"                  \"preface_cache\"                \n#&gt;  [9] \"R-Python_cache\"                \"summary_cache\"                \n#&gt; [11] \"function_cache\"                \"index_cache\"                  \n#&gt; [13] \"function.qmd\"                  \"index.qmd\"                    \n#&gt; [15] \"preface.qmd\"                   \"references.bib\"               \n#&gt; [17] \"references.qmd\"                \"R-Python.qmd\"                 \n#&gt; [19] \"summary.qmd\"                   \"_quarto.yml\"                  \n#&gt; [21] \"02list.qmd\"                    \"03dictionary.qmd\"             \n#&gt; [23] \"class.qmd\"                     \"control_structure.qmd\"        \n#&gt; [25] \".Rproj.user\"                   \"images\"                       \n#&gt; [27] \"data\"                          \"file_RW.qmd\"                  \n#&gt; [29] \".gitignore\"                    \"visualization.qmd\"            \n#&gt; [31] \"01basic_data_type.qmd\"         \"PythonDataScience_notes.Rproj\"\n#&gt; [33] \"docs\"                          \"index.html\"                   \n#&gt; [35] \"site_libs\"                     \"R-Python.rmarkdown\"\n\n# 调用seaborn模块的load_dataset()函数\n# 需要seaborn模块已安装\nsns &lt;- import(\"seaborn\")\n#&gt; No module named 'seaborn'\ntips &lt;- sns$load_dataset(\"tips\")\n#&gt; Error in eval(expr, envir, enclos): object 'sns' not found\nprint(head(tips))\n#&gt; Error in eval(expr, envir, enclos): object 'tips' not found\n\n\n\n1.1.4 R → Python\n\nCodeA &lt;- 1\nB &lt;- c(1, 2, 3)\nC &lt;- c(a = 1, b = 2, c = 3)\nD &lt;- matrix(1:4, nrow = 2)\nE &lt;- data.frame(a = c(1, 2), b = c(3, 4))\nG &lt;- list(1, 2, 3)\nH &lt;- list(c(1, 2), c(3, 4))\nI &lt;- list(a = c(1, 2), b = c(3, 4))\nJ &lt;- function(a, b) {\n  return(a + b)\n  }\nK1 &lt;- NULL\nK2 &lt;- T\nK3 &lt;- F\n\n\n\nCode### float\nr.A\n###&gt; 1.0\ntype(r.A)\n###&gt; &lt;class 'float'&gt;\n\n### list\nr.B\n###&gt; [1.0, 2.0, 3.0]\ntype(r.B)\n###&gt; &lt;class 'list'&gt;\n\nr.C\n###&gt; [1.0, 2.0, 3.0]\ntype(r.C)\n###&gt; &lt;class 'list'&gt;\n\n### numpy.ndarray\nr.D\n###&gt; RuntimeError: Required version of NumPy not available: installation of Numpy &gt;= 1.6 not found\ntype(r.D)\n###&gt; RuntimeError: Required version of NumPy not available: installation of Numpy &gt;= 1.6 not found\n\n### pandas.core.frame.DataFrame\nr.E\n###&gt; {'a': [1.0, 2.0], 'b': [3.0, 4.0]}\ntype(r.E)\n###&gt; &lt;class 'dict'&gt;\n\n### list\nr.G\n###&gt; [1.0, 2.0, 3.0]\ntype(r.G)\n###&gt; &lt;class 'list'&gt;\n\nr.H\n###&gt; [[1.0, 2.0], [3.0, 4.0]]\ntype(r.H)\n###&gt; &lt;class 'list'&gt;\n\n### dict\nr.I\n###&gt; {'a': [1.0, 2.0], 'b': [3.0, 4.0]}\ntype(r.I)\n###&gt; &lt;class 'dict'&gt;\n\n### function\nr.J\n###&gt; &lt;function make_python_function.&lt;locals&gt;.python_function at 0x000002001AE0A840&gt;\ntype(r.J)\n###&gt; &lt;class 'function'&gt;\nr.J(2, 3)\n###&gt; 5\n\n\n### NoneType\nr.K1\ntype(r.K1)\n###&gt; &lt;class 'NoneType'&gt;\n\n\n### bool\nr.K2\n###&gt; True\ntype(r.K2)\n###&gt; &lt;class 'bool'&gt;\nr.K3\n###&gt; False\ntype(r.K3)\n###&gt; &lt;class 'bool'&gt;\n\n\n\n1.1.5 Python → R\n\nCodeimport pandas as pd\n###&gt; ModuleNotFoundError: No module named 'pandas'\nm = [1, 2, 3]\nn = pd.DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n###&gt; NameError: name 'pd' is not defined\n\nA = 1\nB = [1, 2, 3]\nC = [[1, 2], [3, 4]]\nD1 = [[1], 2, 3]\nD2 = [[1, 2], 2, 3]\n\nE = (1, 2, 3)\n\nFF = ((1, 2), (3, 4))\n\nG = ((1, 2), 3, 4)\n\nH = {\"a\": [1, 2, 3],  \"b\": [2, 3, 4]}\n     \nI = {\"a\": 1,\"b\": [2, 3, 4]}\n     \ndef J(a, b):\n  return a + b\n\n\n\nCodepy$m\n#&gt; [1] 1 2 3\npy$n\n#&gt; module '__main__' has no attribute 'n'\n\n### integer\npy$A\n#&gt; [1] 1\nclass(py$A)\n#&gt; [1] \"integer\"\n\npy$B\n#&gt; [1] 1 2 3\nclass(py$B)\n#&gt; [1] \"integer\"\n\n### list\npy$C\n#&gt; [[1]]\n#&gt; [1] 1 2\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 3 4\nclass(py$C)\n#&gt; [1] \"list\"\n\npy$D1\n#&gt; [[1]]\n#&gt; [1] 1\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 2\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 3\nclass(py$D1)\n#&gt; [1] \"list\"\n\npy$D2\n#&gt; [[1]]\n#&gt; [1] 1 2\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 2\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 3\nclass(py$D2)\n#&gt; [1] \"list\"\n\npy$E\n#&gt; [[1]]\n#&gt; [1] 1\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 2\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 3\nclass(py$E)\n#&gt; [1] \"list\"\n\npy$FF\n#&gt; [[1]]\n#&gt; [[1]][[1]]\n#&gt; [1] 1\n#&gt; \n#&gt; [[1]][[2]]\n#&gt; [1] 2\n#&gt; \n#&gt; \n#&gt; [[2]]\n#&gt; [[2]][[1]]\n#&gt; [1] 3\n#&gt; \n#&gt; [[2]][[2]]\n#&gt; [1] 4\nclass(py$FF)\n#&gt; [1] \"list\"\n\npy$G\n#&gt; [[1]]\n#&gt; [[1]][[1]]\n#&gt; [1] 1\n#&gt; \n#&gt; [[1]][[2]]\n#&gt; [1] 2\n#&gt; \n#&gt; \n#&gt; [[2]]\n#&gt; [1] 3\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 4\nclass(py$G)\n#&gt; [1] \"list\"\n\npy$H\n#&gt; $a\n#&gt; [1] 1 2 3\n#&gt; \n#&gt; $b\n#&gt; [1] 2 3 4\nclass(py$H)\n#&gt; [1] \"list\"\n\npy$I\n#&gt; $a\n#&gt; [1] 1\n#&gt; \n#&gt; $b\n#&gt; [1] 2 3 4\nclass(py$I)\n#&gt; [1] \"list\"\n\n### function\npy$J\n#&gt; &lt;function J at 0x000001C6CD5600E0&gt;\nclass(py$J)\n#&gt; [1] \"python.builtin.function\" \"python.builtin.object\"\npy$J(2, 3)\n#&gt; [1] 5",
    "crumbs": [
      "R <---> Python",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R <---> Python</span>"
    ]
  },
  {
    "objectID": "R-Python.html#编写-python-时-rpy2-拥有的互操作性",
    "href": "R-Python.html#编写-python-时-rpy2-拥有的互操作性",
    "title": "\n1  R <—> Python\n",
    "section": "\n1.2 编写 Python 时 rpy2 拥有的互操作性",
    "text": "1.2 编写 Python 时 rpy2 拥有的互操作性\n\nCodepy_module_available(\"rpy2\")\n#&gt; [1] FALSE\n\n\n……",
    "crumbs": [
      "R <---> Python",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R <---> Python</span>"
    ]
  },
  {
    "objectID": "basic_data_type.html",
    "href": "basic_data_type.html",
    "title": "2  基本数据类型",
    "section": "",
    "text": "2.1 变量variable\n规则：\n创建一个名为message的变量（variable），\"Hello python world!\"是变量指向的值（value）。\nCode\nmessage = \"Hello , world!\" \n\n# 直接打印 或 print()\nmessage\nprint(message)\n\n\nHello , world!",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>基本数据类型</span>"
    ]
  },
  {
    "objectID": "basic_data_type.html#变量variable",
    "href": "basic_data_type.html#变量variable",
    "title": "2  基本数据类型",
    "section": "",
    "text": "变量名只能包含字母、数字、下划线、中文字符等，不能包含空格，且只能以字母或下划线开头，不能以数字开头。\n不要用Python关键字和函数名作为变量名。\n变量名具有描述性。",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>基本数据类型</span>"
    ]
  },
  {
    "objectID": "basic_data_type.html#字符串string",
    "href": "basic_data_type.html#字符串string",
    "title": "2  基本数据类型",
    "section": "2.2 字符串string",
    "text": "2.2 字符串string\n用引号引起的是字符串，其中引号既可以是双引号，也可以是单引号。\n\n\nCode\n\"This is a string\"\n'This is also a string'\n\"他说'世界是你们的，也是我们的，但终究是你们的'。流泪\\u1000\"\n\n\n\"他说'世界是你们的，也是我们的，但终究是你们的'。流泪က\"\n\n\n\n2.2.1 使用方法method修改字符串\n例如，在函数调用print()中，方法 title() 出现在变量名后面。\nmethod是Python对数据执行的操作，在name.title()中，name是变量名，句点.让Python对name变量执行方法title()指定的操作。\n\n\nCode\nname = \"ada lovelace\"\nname\nprint(name)\nprint(name.title())\nprint(name.upper())\nprint(name.lower())\nname\n\n\nada lovelace\nAda Lovelace\nADA LOVELACE\nada lovelace\n\n\n'ada lovelace'\n\n\n\nmethod\n\n\nmethod\n作用\n\n\n\n\ntitle()\n以首字母大写的方式显示每个单词\n\n\nupper()\n使字母全大写\n\n\nlower()\n使字母全小写\n\n\nstrip()\n删除左右空白\n\n\nrstrip()\n删除右空白\n\n\nlstrip()\n删除左空白\n\n\nremoveprefix(x)\n删除前缀x\n\n\n\n\n\n2.2.2 在字符串中使用变量\nf字符串，在左\"之前添加字母f （format设置格式），再将变量名放入{}内。\n\n\nCode\nfirst_name = \"ada\"\nlast_name = \"lovelace\"\nfull_name = f\"{first_name} {last_name}\"\nprint(full_name)\nprint(f\"Hello,{full_name.title()}!\")\ngreet = f\"Hello,{full_name.title()}!\"\nprint(greet)\n\nname = \"Eric\"\nmessage = f\"Hello {name},would you like to learn some Python today?\"\nmessage\n\n\nada lovelace\nHello,Ada Lovelace!\nHello,Ada Lovelace!\n\n\n'Hello Eric,would you like to learn some Python today?'\n\n\n\n\n2.2.3 使用制表符或换行符添加空白\n空白泛指任何非打印字符，如空格、制表符、换行符。\n\n\nCode\nprint(\"Python\")\nprint(\"\\tPython\")\nprint(\"Languages:\\n\\t1.Python\\n\\t2.R\\n\\t3.C\")\n\n\nPython\n    Python\nLanguages:\n    1.Python\n    2.R\n    3.C\n\n\n\n\n2.2.4 删除空白\n\n\nCode\nlanguage = \" python \"\nlanguage\n#删除右空白\nlanguage.rstrip()\n\n#删除左空白\nlanguage.lstrip()\n\n#删除左右空白\nlanguage.strip()\n\n\n'python'\n\n\n但这种删除是暂时的\n\n\nCode\nlanguage\n\n\n' python '\n\n\n\n\n2.2.5 删除前后缀\n\n\nCode\ngithub_url = \"https://github.com\"\ngithub_url.removeprefix(\"https://\")\n\nfile = \"basics.txt\"\nfile.removesuffix(\".txt\")\n\n\n'basics'",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>基本数据类型</span>"
    ]
  },
  {
    "objectID": "basic_data_type.html#数number",
    "href": "basic_data_type.html#数number",
    "title": "2  基本数据类型",
    "section": "2.3 数number",
    "text": "2.3 数number\n\n2.3.1 整数integer\n可执行加+、减-、乘*、除/、整除//、乘方**、求模（取余数） % 运算。\n\n\nCode\n2+3\n5-2\n2*3\n8/2\n8//2\n9//2\n5**2\n10%3\nprint(5+3)\nprint(9-1)\nprint(4*2)\nprint(16//2)\nprint(2**3)\n\n\n8\n8\n8\n8\n8\n\n\n\n\n2.3.2 浮点数float\n\n\nCode\n0.2+0.5\n2*0.4\n0.2+0.1\n3*0.1\n\n4/2\n1+2.0\n3.0**2\n\n\n9.0\n\n\n\n\n2.3.3 数中的下划线\n位数分组\n\n\nCode\nx = 14_000_000_000\nx\n\n\n14000000000\n\n\n\n\n2.3.4 同时给多个变量赋值\n用逗号分隔\n\n\nCode\nx,y,z = 1,2.0,4**2\nx\ny\nz\n\n\n16\n\n\n常量constant\n变量名全大写字母表示常量。\n\n\nCode\nFAVORITE_NUMBER = 9\nmessage = f\"My favorite number is {FAVORITE_NUMBER}\"\nprint(message)\n\n\nMy favorite number is 9",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>基本数据类型</span>"
    ]
  },
  {
    "objectID": "basic_data_type.html#python原则",
    "href": "basic_data_type.html#python原则",
    "title": "2  基本数据类型",
    "section": "2.4 Python原则",
    "text": "2.4 Python原则\n\n\nCode\nimport this\n\n\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>基本数据类型</span>"
    ]
  },
  {
    "objectID": "list.html",
    "href": "list.html",
    "title": "3  列表",
    "section": "",
    "text": "3.1 访问元素\n索引从0开始，而不是从1开始。\nCode\nprint(Country[0])\nprint(Country[4])\n\n\nChina\nGerman\n也可以从倒数第一个数向前访问\nCode\nprint(Country[-1])\nprint(Country[-2])\nprint(Country[-3])\n\n\nJapan\nGerman\nFrance\n使用列表中的值\nCode\nintro = f\"Hello,I'm from {Country[0]}!\"\nprint(intro)\n\n\nHello,I'm from China!",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>列表</span>"
    ]
  },
  {
    "objectID": "list.html#修改添加和删除元素",
    "href": "list.html#修改添加和删除元素",
    "title": "3  列表",
    "section": "3.2 修改、添加和删除元素",
    "text": "3.2 修改、添加和删除元素\n\n3.2.1 修改元素\n\n\nCode\nnum = [1,2,3,4,5,6,7,8,9]\nprint(num)\n\nnum[0] = 0\nprint(num)\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n3.2.2 添加元素\n\n在列表末尾添加元素\n追加（append()）到列表末尾\n\n\nCode\nnum = [1,2,3,4,5,6,7,8,9]\nprint(num)\n\nnum.append(10)\nprint(num)\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n可以先创建空列表，再用append逐个添加元素。\n\n\nCode\nfruit = []\nfruit.append(\"apple\")\nfruit.append(\"pear\")\n\nprint(fruit)\n\n\n['apple', 'pear']\n\n\n在列表中插入元素\n使用insert()方法可在列表的任意位置添加元素\n\n\nCode\nnum = [1,2,3,4,5,6,7,8,9]\nprint(num)\nnum.insert(0,0)\nnum\n\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\n3.2.3 删除元素\n\n使用del 语句删除元素\n\n\nCode\nnum = [1,2,3,4,5,6,7,8,9]\n\ndel num[0]\ndel num[2]\nnum\n\n\n[2, 3, 5, 6, 7, 8, 9]\n\n\n使用pop()方法删除元素\n弹出pop() 方法删除列表末尾的元素\n\n\nCode\nnum = [1,2,3,4,5,6,7,8,9]\npopped_num = num.pop()\nnum\npopped_num\n\n\n9\n\n\n删除任意位置的元素\n也可以使用pop()方法删除列表中任意位置的元素，指定索引即可\n\n\nCode\nnum = [1,2,3,4,5,6,7,8,9]\nfifth_num = num.pop(4)\nnum\n\n\n[1, 2, 3, 4, 6, 7, 8, 9]\n\n\n根据值删除元素\n\n\nCode\nnum = [1,2,3,4,5,6,7,8,9]\nhate_num = 4\nnum.remove(hate_num)\nnum\n\n\n[1, 2, 3, 5, 6, 7, 8, 9]",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>列表</span>"
    ]
  },
  {
    "objectID": "list.html#管理列表",
    "href": "list.html#管理列表",
    "title": "3  列表",
    "section": "3.3 管理列表",
    "text": "3.3 管理列表\n\n使用sort()方法永久排序\n\n\nCode\n### 字母顺序\nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nletters.sort()\nprint(letters)\n\n### 字母逆序\nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nletters.sort(reverse = True)\nprint(letters)\n\n\n['a', 'k', 'n', 'r', 'v', 'z']\n['z', 'v', 'r', 'n', 'k', 'a']\n\n\n使用sorted()函数临时排序\n\n\nCode\nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nsorted(letters)\nsorted(letters,reverse = True)\nprint(letters)\n\n\n['a', 'r', 'k', 'n', 'v', 'z']\n\n\n使用reverse()方法反向打印列表\n\n\nCode\nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nletters.reverse()\nprint(letters) #反向打印\nletters.reverse()\nprint(letters) #恢复\n\n\n['z', 'v', 'n', 'k', 'r', 'a']\n['a', 'r', 'k', 'n', 'v', 'z']\n\n\n使用len()函数确定列表长度\n\n\nCode\nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nlen(letters)\n\n\n6",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>列表</span>"
    ]
  },
  {
    "objectID": "list.html#遍历整个列表",
    "href": "list.html#遍历整个列表",
    "title": "3  列表",
    "section": "3.4 遍历整个列表",
    "text": "3.4 遍历整个列表\nfor循环\n注意避免缩进错误，如忘记缩进、忘记缩进额外的代码行、不必要的缩进、循环后不必要的缩进、遗漏冒号、\n\n\nCode\nsubjects = [\"Chinese\",\"Mathematics\",\"English\",\"Physics\",\"Chemistry\",\"Biology\"]\nfor subject in subjects:\n  print(f\"{subject}:\")\n  print(f\"{subject} is very important for students.\\n\")\nprint(\"day day up!\")\n\n\nChinese:\nChinese is very important for students.\n\nMathematics:\nMathematics is very important for students.\n\nEnglish:\nEnglish is very important for students.\n\nPhysics:\nPhysics is very important for students.\n\nChemistry:\nChemistry is very important for students.\n\nBiology:\nBiology is very important for students.\n\nday day up!",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>列表</span>"
    ]
  },
  {
    "objectID": "list.html#创建数值列表",
    "href": "list.html#创建数值列表",
    "title": "3  列表",
    "section": "3.5 创建数值列表",
    "text": "3.5 创建数值列表\n\n3.5.1 使用range()函数创建列表\n\n\nCode\nfor value in range(-3,3):\n  print(value)\n\n\n-3\n-2\n-1\n0\n1\n2\n\n\n\n\nCode\nnumbers = list(range(-5,5,2))\nnumbers\n\n\nsquares = []\nfor value in range(1,11):\n  square=value**2\n  squares.append(square)\nprint(squares)\n\n\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\n\n\n3.5.2 统计函数\n\n\nCode\ndigits = list(range(0,10))\nmin(digits)\nmax(digits)\nsum(digits)\n\n\n45\n\n\n\n\n3.5.3 列表推导式list comprehension\n\n\nCode\nsquares = [i**2 for i in range(1,10)]\nsquares\n\n\n[1, 4, 9, 16, 25, 36, 49, 64, 81]",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>列表</span>"
    ]
  },
  {
    "objectID": "list.html#slice",
    "href": "list.html#slice",
    "title": "3  列表",
    "section": "3.6 slice",
    "text": "3.6 slice\n列表的部分称为slice。\n\n\nCode\nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n# 左包含，右不包含\nletters[0:3] \nletters[3:5]  \nletters[:3]    # 0，1，2\nletters[:-2]   # 从头到倒数第2之前1位\nletters[2:]    # 从第3到末尾\nletters[-3:]   # 从倒数第3到末尾\n\nletters[::2] # 从头到尾每间隔2打印\nletters[1::3]\n\n\n\n\n# 遍历slice\n\nfor i in letters[:3]:\n  i.upper()\n  \n\n# 复制slice\n字母 = letters[:]  # 从头到尾\n字母.append(\"X\")\n字母\nletters.append(\"Y\")\nletters\n\n#不使用slice   \nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nletters\nLETTERS = letters         # 两种指向同一个列表\nLETTERS.append(\"X\")\nLETTERS\nletters\nletters.append(\"Y\")     \nLETTERS\nletters\n\n\n['a', 'r', 'k', 'n', 'v', 'z', 'X', 'Y']",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>列表</span>"
    ]
  },
  {
    "objectID": "list.html#元组tuple",
    "href": "list.html#元组tuple",
    "title": "3  列表",
    "section": "3.7 元组tuple",
    "text": "3.7 元组tuple\nPython将不能修改的值称为不可变的。而不可变的列表称为元组（tuple）。元组使用圆括号()+逗号,标识。严格地说，元组是用逗号标识的，圆括号只是让元组看起来更整洁、更清晰，并不是必须的。\n\n\nCode\ndimensions = (200,50,4)\ndimensions\n# dimensions[0] = 333 # 'tuple' object does not support item assignment\n\nsingle = 9,\n# single[0] = 3\n\n\n虽然元组的元素不能修改，但可以重新给表示元组的变量赋值\n\n\nCode\ndimensions = (200,50,4)\ndimensions\ndimensions = 2,3,4,5\ndimensions\nfor i in dimensions:\n  i",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>列表</span>"
    ]
  },
  {
    "objectID": "dictionary.html",
    "href": "dictionary.html",
    "title": "4  字典",
    "section": "",
    "text": "4.1 操纵字典",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>字典</span>"
    ]
  },
  {
    "objectID": "dictionary.html#操纵字典",
    "href": "dictionary.html#操纵字典",
    "title": "4  字典",
    "section": "",
    "text": "4.1.1 访问值\n\n\nCode\nalien_0[\"color\"]\nalien_0[\"points\"]\n\n\n5\n\n\n\n\n4.1.2 添加键值对\n\n\nCode\nalien_0[\"x\"] = 0\nalien_0[\"y\"] = 25\nalien_0\n\n\n{'color': 'green', 'points': 5, 'x': 0, 'y': 25}\n\n\n\n\n4.1.3 从空字典开始\n\n\nCode\nalien_0 = {}\nalien_0[\"color\"]  = \"green\"\nalien_0[\"points\"] = 5\n\nalien_0\n\n\n{'color': 'green', 'points': 5}\n\n\n\n\n4.1.4 修改\n\n\nCode\nalien_0[\"color\"] =[ \"yellow\",\"red\",\"blue\"]\nalien_0\n\n\n{'color': ['yellow', 'red', 'blue'], 'points': 5}\n\n\n\n\n4.1.5 删除\n\n\nCode\nalien_0 = {\"color\":\"green\",\"points\":5}\n\ndel alien_0[\"points\"]\nalien_0\n\n\n{'color': 'green'}\n\n\n\n\n4.1.6 由类似的对象组成的字典\n\n\nCode\nlike_language={\n    \"jen\":\"python\",\n    \"sarah\":\"c\",\n    \"edward\":\"r\",\n    \"phil\":\"python\",\n    }\nlike_language\n\n\n{'jen': 'python', 'sarah': 'c', 'edward': 'r', 'phil': 'python'}\n\n\n\n\n4.1.7 get()方法访问值\n\n\nCode\nalien_0[\"speed\"]\n#&gt;&gt;&gt; Traceback (most recent call last):\n#&gt;&gt;&gt;   File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n#&gt;&gt;&gt; KeyError: 'speed'\n\n\nget()方法第一个参数用于指定键key，第二个参数为指定的键不存在时的返回值。\n\n\nCode\nalien_0 = {\"color\":\"green\",\"points\":5}\nalien_0.get(\"color\")\nalien_0.get(\"speed\",\"Error,no existing\")\n\n\n'Error,no existing'",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>字典</span>"
    ]
  },
  {
    "objectID": "dictionary.html#遍历字典",
    "href": "dictionary.html#遍历字典",
    "title": "4  字典",
    "section": "4.2 遍历字典",
    "text": "4.2 遍历字典\n\n4.2.1 遍历所有键值对\nDict.items()\n\n\nCode\nlike_language={\n    \"jen\":\"python\",\n    \"sarah\":\"c\",\n    \"edward\":\"r\",\n    \"phil\":\"python\",\n    }\nlike_language.items()\n\nfor i,j in like_language.items():\n    print(f\"Key:{i}\")\n    print(f\"Value:{j}\")\n    print(f\"{i.title()}'s favorite language is {j.title()}.\\n\")\n\n\nKey:jen\nValue:python\nJen's favorite language is Python.\n\nKey:sarah\nValue:c\nSarah's favorite language is C.\n\nKey:edward\nValue:r\nEdward's favorite language is R.\n\nKey:phil\nValue:python\nPhil's favorite language is Python.\n\n\n\n\n\n4.2.2 遍历所有键\nDict.keys()\n\n\nCode\nlike_language.keys()\n\nfor i in like_language.keys():\n    print(f\"Key:{i.title()}\")\n\n\nKey:Jen\nKey:Sarah\nKey:Edward\nKey:Phil\n\n\n\n\n\n\n\n\nNote\n\n\n\n默认遍历使用键\n\n\nCode\nfor i in like_language: \n    print(f\"Key:{i.title()}\")\n\n\nKey:Jen\nKey:Sarah\nKey:Edward\nKey:Phil\n\n\n\n\n\n\n4.2.3",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>字典</span>"
    ]
  },
  {
    "objectID": "dictionary.html#默认遍历键",
    "href": "dictionary.html#默认遍历键",
    "title": "4  字典",
    "section": "4.3 默认遍历键",
    "text": "4.3 默认遍历键\nfor i in like_language: print(f”Key:{i.title()}“)\n\n4.3.1 按特定顺序遍历所有键\nsorted()函数\n\n\nCode\nlike_language={\n    \"jen\":\"python\",\n    \"sarah\":\"c\",\n    \"edward\":\"r\",\n    \"phil\":\"python\",\n    }\nfor i in sorted(like_language.keys()):\n    print(i.title())\n\n\nEdward\nJen\nPhil\nSarah\n\n\n\n\n4.3.2 遍历所有值\nDict.values()\n\n\nCode\nlike_language.values()\nfor lan in like_language.values():\n    lan.title()\n\n\n为剔除重复项，可使用集合set()函数。\n\n\nCode\nfor lan in set(like_language.values()):\n    lan.title()",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>字典</span>"
    ]
  },
  {
    "objectID": "dictionary.html#集合set",
    "href": "dictionary.html#集合set",
    "title": "4  字典",
    "section": "4.4 集合set",
    "text": "4.4 集合set\n\n\n\n\n\n\nNote\n\n\n\n集合的性质：互异性，无序性，确定性。\n可以使用一对花括号{}直接创建集合，用逗号分隔。\n\n\nCode\nlanguage_set = {\"python\",\"r\",\"c\"}\nlanguage_set\n\n\n{'c', 'python', 'r'}",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>字典</span>"
    ]
  },
  {
    "objectID": "dictionary.html#嵌套",
    "href": "dictionary.html#嵌套",
    "title": "4  字典",
    "section": "4.5 嵌套",
    "text": "4.5 嵌套\n\n4.5.1 字典列表\n列表的每个元素是一个字典\n\n\nCode\nalien_0 = {'color': 'green', 'points': 5}\nalien_1 = {'color': 'yellow', 'points': 10} \nalien_2 = {'color': 'red', 'points': 15}\naliens = [alien_0, alien_1, alien_2] \nfor alien in aliens: \n    print(alien)\n\n\n{'color': 'green', 'points': 5}\n{'color': 'yellow', 'points': 10}\n{'color': 'red', 'points': 15}\n\n\n\n\n4.5.2 在字典中存储列表\n\n\nCode\nr_object = {\n    \"num\":[1,2,3,4,5],\n    \"strings\":[\"qwe\",\"asd\",\"zxc\"],\n    \"bool\":[True,False],\n}\nr_object[\"num\"]\n\n\n[1, 2, 3, 4, 5]\n\n\n\n\n4.5.3 在字典中存储字典\n\n\nCode\nemail = {\n    \"Tencent\":{\n        \"prefix\":\"3036683293\",\n        \"suffix\":\"@qq.com\",\n        \"state\":\"hardly\"\n    },\n    \"USTC\":{\n        \"prefix\":\"wangal00\",\n        \"suffix\":\"@mail.ustc.edu.cn\",\n        \"state\":\"usually\",\n    },\n    \"Microsoft\":{\n        \"prefix\":\"wanganlin00\",\n        \"suffix\":\"@outlook.com\",\n        \"state\":\"often\",\n    },\n    \"Google\":{\n        \"prefix\":\"wanganlin00\",\n        \"suffix\":\"@gmail.com\",\n        \"state\":\"can't\",\n    },\n}\nfor i,j in email.items():\n    print(f\"Belongs to {i}:\")\n    print(f'My email is {j[\"prefix\"]}{j[\"suffix\"]} , I {j[\"state\"]} use it.\\n')\n\n\nBelongs to Tencent:\nMy email is 3036683293@qq.com , I hardly use it.\n\nBelongs to USTC:\nMy email is wangal00@mail.ustc.edu.cn , I usually use it.\n\nBelongs to Microsoft:\nMy email is wanganlin00@outlook.com , I often use it.\n\nBelongs to Google:\nMy email is wanganlin00@gmail.com , I can't use it.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>字典</span>"
    ]
  },
  {
    "objectID": "control_structure.html",
    "href": "control_structure.html",
    "title": "5  Control structure",
    "section": "",
    "text": "5.1 if 语句",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control structure</span>"
    ]
  },
  {
    "objectID": "control_structure.html#if-语句",
    "href": "control_structure.html#if-语句",
    "title": "5  Control structure",
    "section": "",
    "text": "5.1.1 if语句\nif conditional_test1:\n    do something\nif conditional_test2:\n    do something\n......\nif conditional_testn:\n    do something\n\n\n5.1.2 if-else 语句\nif conditional_test:\n    do something\nelse:\n    do anotherthing\n\n\n5.1.3 if-elif-else 语句\nelse:可省略\nif conditional_test1:\n    do something\nelif conditional_test2:\n    do something\n......\nelif condtional_testn:\n    do something\nelse:\n    do otherthings\n\n\nCode\ncars = [\"audi\",\"bmW\",\"subaru\",\"toyota\"] \nfor i in cars: \n    if i.lower()=='bmw': \n        i.upper() \n    else: \n        i.title()\n\n\n与 and、或or\n\n\nCode\nages = [17,34,29,18,46,55,9,60,35,14,56,64] \nstate = [] \nfor i in ages: \n    if i &lt;18: \n        state.append(\"young\") \n    elif i&gt;=18 and i&lt;60: \n        state.append(\"adult\") \n    else: \n        state.append(\"elder\") \nstate\n\n\n['young',\n 'adult',\n 'adult',\n 'adult',\n 'adult',\n 'adult',\n 'young',\n 'elder',\n 'adult',\n 'young',\n 'adult',\n 'elder']\n\n\n在或不在 in、not in\n\n\nCode\nusers = [\"小米\",\"小亮\",\"小美\",\"小明\",\"小帅\"]\n\nuser1 = \"小美\" \nif user1 in users:\n    print(f\"欢迎光临,{user1}!\")\nuser2 = \"小花\"\nif user2 not in users:\n    print(f\"请加入我们，{user2}!\")\n\n\n欢迎光临,小美!\n请加入我们，小花!\n\n\n\n\n5.1.4 确定列表非空\n对于数值0，空值None，单引号空字符串''，双引号空字符串\"\"，空列表[]，空元组()，空字典{}，python都会返回False。\n\n\nCode\nusers = []\n\nif users:\n    for i in users:\n        print(f\"欢迎光临,{i}!\")\nelse:\n    print(\"无人使用\")\n\n\n无人使用\n\n\n\n\n5.1.5 使用多个列表\n\n\nCode\ninvited = [\"A\",\"S\",\"D\",\"F\",\"G\",\"H\",\"J\",\"K\"]\npresent = [\"A\",\"F\",\"Z\",\"X\",\"K\",\"C\"]\n\nfor pre in present:\n    if pre in invited:\n        print(f\"欢迎您的到来，{pre}先生/女士！\")\n    else:\n        print(f\"抱歉，{pre}先生/女士，你没有请柬，无法进入。\")\nprint(\"\\n 欢迎\")\n\n\n欢迎您的到来，A先生/女士！\n欢迎您的到来，F先生/女士！\n抱歉，Z先生/女士，你没有请柬，无法进入。\n抱歉，X先生/女士，你没有请柬，无法进入。\n欢迎您的到来，K先生/女士！\n抱歉，C先生/女士，你没有请柬，无法进入。\n\n 欢迎",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control structure</span>"
    ]
  },
  {
    "objectID": "control_structure.html#while循环",
    "href": "control_structure.html#while循环",
    "title": "5  Control structure",
    "section": "5.2 while循环",
    "text": "5.2 while循环\n\n\nCode\ni=0\nwhile i&lt;=9:\n    print(i)\n    i=i+1\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n5.2.1 用户选择退出循环\n\n\nCode\nprompt = \"\\n 输入一条消息，我将会复述一遍:\\n 输入 quit 结束程序。\"\nmessage = \"\"\nwhile message != 'quit':\n    message = input(prompt)\n    if message !='quit':\n        print(message)\n\n\n\n\n5.2.2 使用标志flag\n\n\nCode\nprompt = \"\\n 输入一条消息，我将会复述一遍:\\n 输入 quit 结束程序。\"\nactive = True\nwhile active:\n    message = input(prompt)\n    if message !='quit':\n        print(message)\n    else:\n        active =False\n\n\n\n\n5.2.3 使用break退出循环\n\n\nCode\nprompt = \"\\n 输入一条消息，我将会复述一遍:\\n 输入 quit 结束程序。\"\nwhile True:\n    message = input(prompt)\n    if message !='quit':\n        print(message)\n    else:\n        break\n\n\n\n\n5.2.4 在循环中使用continue\n\n\nCode\ni=0\nwhile i &lt;10:\n    i=i+1\n    if i%2 ==0:\n        continue\n    print(i)\n\n\n1\n3\n5\n7\n9\n\n\n\n\n5.2.5 使用while循环处理列表和字典\n\n5.2.5.1 在列表之间移动元素\n\n\nCode\n# 首先，创建一个待验证用户列表 \n# 和一个用于存储已验证用户的空列表\nunconfirmed_users = ['alice', 'brian', 'candace'] \nconfirmed_users = [] \n\n# 验证每个用户，直到没有未验证用户为止\n# 将每个经过验证的用户都移到已验证用户列表中\nwhile unconfirmed_users:\n    current_user = unconfirmed_users.pop() \n    print(f\"Verifying user: {current_user.title()}\")\n    confirmed_users.append(current_user) \n    \n# 显示所有的已验证用户 \nprint(\"\\nThe following users have been confirmed:\") \nfor confirmed_user in confirmed_users: \n    print(confirmed_user.title())\n\n\nVerifying user: Candace\nVerifying user: Brian\nVerifying user: Alice\n\nThe following users have been confirmed:\nCandace\nBrian\nAlice\n\n\n\n\n5.2.5.2 删除所有特定值\n\n\nCode\npets = ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']\nprint(pets)\nwhile 'cat' in pets: \n    pets.remove('cat')\nprint(pets)\n\n\n['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']\n['dog', 'dog', 'goldfish', 'rabbit']\n\n\n\n\n5.2.5.3 让用户填充字典\n\n\nCode\n# 调查程序\nresponses = {}\nflag = True\n\n\nwhile flag:\n    # 提示被调查者输入性名和回答,存储在字典中\n    name = input(\"\\n What is your name?\")\n    response = input(\"What is your favorite fruit?\")\n    responses[name] = response\n    \n    repeat = input(\"Whether to move on to the next person (yes/no)\")\n    if repeat == \"no\":\n        flag = False\n\nprint(\"\\n ---Results---\")\nfor i,j in responses.items():\n        print(f\"{i}'s favorite fruit is {j}.\")",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control structure</span>"
    ]
  },
  {
    "objectID": "function.html",
    "href": "function.html",
    "title": "6  函数",
    "section": "",
    "text": "6.1 定义函数",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "function.html#定义函数",
    "href": "function.html#定义函数",
    "title": "6  函数",
    "section": "",
    "text": "6.1.1 传参\n\n\nCode\ndef greet_user(username):\n    \"\"\"文档字符串（docstring）\"\"\"\n    print(f\"Hello,{username.title()}\")\n\ngreet_user(\"lily\")\n\n\nHello,Lily\n\n\n\n\n6.1.2 形参（parameter）和实参（argument）\n形参即函数完成任务所需要的信息，例如greet_user(username)中的username。\n实参即在调用call 函数时传递给函数的信息，例如greet_user(\"lily\")中的\"lily\"。\n位置实参 关键字实参 默认值，在给形参指定默认值时，等号两边不要出现空格，函数调用中的关键字实参也遵循这种约定。",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "function.html#返回值",
    "href": "function.html#返回值",
    "title": "6  函数",
    "section": "6.2 返回值",
    "text": "6.2 返回值\n\n6.2.1 返回字典\n实参可选\n\n\nCode\ndef get_formatted_name(first_name, last_name, middle_name=''):\n    \"\"\"返回标准格式的姓名\"\"\"\n    if middle_name: \n        full_name = f\"{first_name} {middle_name} {last_name}\"\n    else: \n        full_name = f\"{first_name} {last_name}\" \n    return full_name.title() \n\nmusician = get_formatted_name('jimi', 'hendrix') \nprint(musician) \nmusician = get_formatted_name('john', 'hooker', 'lee') \nprint(musician)\n\n\nJimi Hendrix\nJohn Lee Hooker\n\n\n\n\nCode\ndef build_person(first_name,last_name,age=None):\n    \"\"\" 返回字典，其中包含姓名或年龄\"\"\"\n    person = {\"first\": first_name,\"last\":last_name}\n    \n    if age:\n        person[\"age\"] = age\n    return person\nmusician = build_person('jimi', 'hendrix',27) \nprint(musician) \n\n\n{'first': 'jimi', 'last': 'hendrix', 'age': 27}",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "function.html#传递列表",
    "href": "function.html#传递列表",
    "title": "6  函数",
    "section": "6.3 传递列表",
    "text": "6.3 传递列表\n\n\nCode\n# 函数\ndef print_models(unprinted_designs, completed_models): \n    \"\"\" 模拟打印每个设计，直到没有未打印的设计为止\n    打印每个设计后，都将其移到列表 completed_models 中 \"\"\" \n    while unprinted_designs: \n        current_design = unprinted_designs.pop() \n        print(f\"Printing model: {current_design}\") \n        completed_models.append(current_design)\n        \ndef show_completed_models(completed_models): \n    \"\"\"显示打印好的所有模型\"\"\" \n    print(\"\\nThe following models have been printed:\") \n    for completed_model in completed_models: \n        print(completed_model) \n\n# 主程序\nunprinted_designs = ['phone case', 'robot pendant', 'dodecahedron']\ncompleted_models = [] \n\nprint_models(unprinted_designs, completed_models) \nshow_completed_models(completed_models)\n\nunprinted_designs\ncompleted_models\n\n# 主程序 使用列表副本\nunprinted_designs = ['phone case', 'robot pendant', 'dodecahedron']\ncompleted_models = [] \n\nprint_models(unprinted_designs[:], completed_models) \nshow_completed_models(completed_models)\n\nunprinted_designs\ncompleted_models\n\n\nPrinting model: dodecahedron\nPrinting model: robot pendant\nPrinting model: phone case\n\nThe following models have been printed:\ndodecahedron\nrobot pendant\nphone case\nPrinting model: dodecahedron\nPrinting model: robot pendant\nPrinting model: phone case\n\nThe following models have been printed:\ndodecahedron\nrobot pendant\nphone case\n\n\n['dodecahedron', 'robot pendant', 'phone case']",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "function.html#传递任意数量的实参",
    "href": "function.html#传递任意数量的实参",
    "title": "6  函数",
    "section": "6.4 传递任意数量的实参",
    "text": "6.4 传递任意数量的实参\n\n\nCode\ndef make_pizza(*toppings):\n    \"\"\"打印顾客点的所有配料\"\"\"\n    print(toppings)\n    return toppings\ntps = make_pizza(\"qwe\",\"asd\",\"zxc\")\n\n\n('qwe', 'asd', 'zxc')\n\n\nPython先匹配位置实参和关键字实参，再将剩余的实参匹配到最后一个形参。*toppings 中的星号 * 创建一个名为 toppings 的元组。\n**user_info中的两个星号 ** 创建一个名为user_info的字典，接收任意数量的关键字实参\n\n\nCode\ndef build_profile(first, last, **user_info):\n    \"\"\"创建一个字典，其中包含我们知道的有关用户的一切\"\"\"\n    user_info['first_name'] = first \n    user_info['last_name'] = last \n    return user_info \n\nuser_profile = build_profile('albert', 'einstein', location='princeton', field='physics') \nprint(user_profile)\n\n\n{'location': 'princeton', 'field': 'physics', 'first_name': 'albert', 'last_name': 'einstein'}",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "function.html#模块module",
    "href": "function.html#模块module",
    "title": "6  函数",
    "section": "6.5 模块module",
    "text": "6.5 模块module",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "function.html#导入整个模块",
    "href": "function.html#导入整个模块",
    "title": "6  函数",
    "section": "6.6 导入整个模块",
    "text": "6.6 导入整个模块\nimport module_name\nmodule_name.function_name()",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "function.html#使用as给模块指定别名",
    "href": "function.html#使用as给模块指定别名",
    "title": "6  函数",
    "section": "6.7 使用as给模块指定别名",
    "text": "6.7 使用as给模块指定别名\nimport module_name as mn\nmn.function_name()",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "function.html#导入特定函数",
    "href": "function.html#导入特定函数",
    "title": "6  函数",
    "section": "6.8 导入特定函数",
    "text": "6.8 导入特定函数\nfrom module_name import function_name\nfunction_name()",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "function.html#使用as给函数指定别名",
    "href": "function.html#使用as给函数指定别名",
    "title": "6  函数",
    "section": "6.9 使用as给函数指定别名",
    "text": "6.9 使用as给函数指定别名\nfrom module_name import function_name as fn\nfn()",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "function.html#使用-导入模块中使用函数",
    "href": "function.html#使用-导入模块中使用函数",
    "title": "6  函数",
    "section": "6.10 使用* 导入模块中使用函数",
    "text": "6.10 使用* 导入模块中使用函数\n不建议，同名覆盖\nfrom module_name import *",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>函数</span>"
    ]
  },
  {
    "objectID": "class.html",
    "href": "class.html",
    "title": "7  类class",
    "section": "",
    "text": "7.1 创建类\n特殊方法用行话说叫作magic method，如__getitem__，dunder-getitem，双下划线方法\n类中的函数称为方法，_init_(self,...) 是一个特殊方法，其中self 形参指向实例，必不可少且必须位于首位。其他形参是基于类创建的实例的初始化属性。可通过实例访问的变量称为属性（attribute）。\nCode\n# 定义类\nclass Car:\n    \"\"\"表示汽车的类，存储有关汽车的信息 \"\"\"\n    def __init__(self, make, model, year): \n        \"\"\"初始化描述汽车的属性\"\"\" \n        self.make = make \n        self.model = model \n        self.year = year \n        self.odometer_reading = 0  # 给属性指定默认值\n    def get_descriptive_name(self): \n        \"\"\"返回格式规范的描述性信息\"\"\" \n        long_name = f\"{self.year} {self.make} {self.model}\" \n        return long_name.title() \n    def read_odometer(self):\n        \"\"\"打印汽车行驶里程\"\"\"\n        print(f\"This car has {self.odometer_reading} miles on it.\")\n    def update_odometer(self,mileage):\n        \"\"\"更新里程数\n           禁止回调        \"\"\"\n        if mileage &gt;= self.odometer_reading:\n            self.odometer_reading = mileage\n        else:\n            print(\"错误！禁止回调！！！\")\n            \n# 创建对象\nmy_new_car = Car('audi', 'a4', 2024)\nCode\n# 访问属性\nmy_new_car.make\nmy_new_car.odometer_reading\n\n# 调用方法\nprint(my_new_car.get_descriptive_name())\nmy_new_car.read_odometer() \n\n\n2024 Audi A4\nThis car has 0 miles on it.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>类class</span>"
    ]
  },
  {
    "objectID": "class.html#创建类",
    "href": "class.html#创建类",
    "title": "7  类class",
    "section": "",
    "text": "7.1.1 修改属性的值\n\n\nCode\n# 通过属性修改\nmy_new_car.odometer_reading = 55\nmy_new_car.odometer_reading\n\n# 通过方法修改\nmy_new_car.update_odometer(100)\nmy_new_car.odometer_reading\nmy_new_car.update_odometer(24)\n\n\n错误！禁止回调！！！",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>类class</span>"
    ]
  },
  {
    "objectID": "class.html#继承类",
    "href": "class.html#继承类",
    "title": "7  类class",
    "section": "7.2 继承类",
    "text": "7.2 继承类\ninheritance ，原有的类称为父类（parent class）或超类（super class），新类称为子类（child class）\n\n7.2.1 子类\n\n\nCode\nclass ElectricCar(Car):               # 括号内指定父类名称\n    '''电动车'''\n    def __init__(self,make,model,year):\n        '''先初始化父类的属性,\n        再初始化电动车的特有属性'''\n        super().__init__(make,model,year) # 调用父类的__init__()方法\n        self.battery_size = 80\n    def battery_capacity(self):\n        '''打印电池容量'''\n        print(f'电池容量为 {self.battery_size} kWh。')\n    def read_odometer(self):              # 重写父类中的方法\n        \"\"\"打印电动车里程\"\"\"\n        print(f\"电动车已经行驶了{self.odometer_reading} 千米。\")\n\n# 创建对象\nmy_ECar = ElectricCar('nissan','leaf',2024)\nprint(my_ECar.get_descriptive_name())\nmy_ECar.battery_capacity()\nmy_ECar.read_odometer()\n\n\n2024 Nissan Leaf\n电池容量为 80 kWh。\n电动车已经行驶了0 千米。\n\n\n\n\n7.2.2 类的组合（composition）\n\n\nCode\nclass Battery:\n    '''电池信息'''\n    def __init__(self,manufacture=\"BYD\",material=\"Lithium_plomers\",capacity=100):\n        self.manufacture = manufacture\n        self.material = material\n        self.capacity = capacity\n    def get_descriptive_name(self): \n        \"\"\"返回格式规范的描述性信息\"\"\" \n        long_name = f\"{self.manufacture} {self.material} {self.capacity}\" \n        return long_name.title() \n    def print_battery_capacity(self):\n        '''打印电池容量'''\n        print(f'电池容量为 {self.capacity} kWh。')\n        \nclass ElectricCar2(Car):             \n    '''电动车'''\n    def __init__(self,make,model,year,):\n        super().__init__(make,model,year) # 调用父类的__init__()方法\n        self.battery = Battery()\n\nmy_Ecar2 = ElectricCar2(\"nissan\",\"leaf\",2024)\nmy_Ecar2.battery.print_battery_capacity()\nmy_Ecar2.battery.get_descriptive_name()\n\n\n电池容量为 100 kWh。\n\n\n'Byd Lithium_Plomers 100'",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>类class</span>"
    ]
  },
  {
    "objectID": "class.html#导入类",
    "href": "class.html#导入类",
    "title": "7  类class",
    "section": "7.3 导入类",
    "text": "7.3 导入类\nfrom Module import *",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>类class</span>"
    ]
  },
  {
    "objectID": "class.html#python标准库",
    "href": "class.html#python标准库",
    "title": "7  类class",
    "section": "7.4 Python标准库",
    "text": "7.4 Python标准库",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>类class</span>"
    ]
  },
  {
    "objectID": "I-O.html",
    "href": "I-O.html",
    "title": "8  读入和写出",
    "section": "",
    "text": "8.1 读取文件\nCode\nf = open(\"data/pi_digits.txt\",mode=\"r\")\ncontents = f.read()\nprint(contents)\ncontents = contents.rstrip()\nprint(contents)\nf.close()\n\n\n3.1415926535\n  8979323846\n  2643383279\n\n\n\n\n3.1415926535\n  8979323846\n  2643383279\nCode\nwith open(\"data/pi_digits.txt\",mode=\"r\") as g:\n    for i in g:\n        print(i)\n\n\n3.1415926535\n\n  8979323846\n\n  2643383279\nCode\nfrom pathlib import Path\npath = Path(\"data/pi_digits.txt\")\nf = path.read_text()\nf = f.splitlines()\nfor i in f:\n    print(i)\n\n\n3.1415926535\n  8979323846\n  2643383279",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>读入和写出</span>"
    ]
  },
  {
    "objectID": "I-O.html#写入文件",
    "href": "I-O.html#写入文件",
    "title": "8  读入和写出",
    "section": "8.2 写入文件",
    "text": "8.2 写入文件\n\n\nCode\nwith open(\"data/write.txt\",mode=\"a\") as w:\n    w.write(\"Π是无限不循环小数。\")\nwith open(\"data/write.txt\",mode=\"a\") as w:\n    w.write(\"fafhaofhaohfo\")",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>读入和写出</span>"
    ]
  },
  {
    "objectID": "I-O.html#异常处理",
    "href": "I-O.html#异常处理",
    "title": "8  读入和写出",
    "section": "8.3 异常处理",
    "text": "8.3 异常处理\nexception\n\n\nCode\ndef division(dividend,divisor):\n    answer = dividend/divisor\n    return(answer)\ndivision(4,2)\ndivision(4,0)\n\ndef division_(dividend,divisor):\n    try:\n        answer = dividend/divisor\n    except ZeroDivisionError:\n        print(\"You can't divide by 0!\")\n    else:\n        return(answer)\n    finally:\n        print(\"OK\")\ndivision_(4,2)\ndivision_(4,0)\n\n\nZeroDivisionError: division by zero",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>读入和写出</span>"
    ]
  },
  {
    "objectID": "I-O.html#存储数据",
    "href": "I-O.html#存储数据",
    "title": "8  读入和写出",
    "section": "8.4 存储数据",
    "text": "8.4 存储数据",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>读入和写出</span>"
    ]
  },
  {
    "objectID": "pandas.html",
    "href": "pandas.html",
    "title": "9  pandas",
    "section": "",
    "text": "9.1",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>pandas</span>"
    ]
  }
]