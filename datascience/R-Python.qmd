---
title: "R-Python"
knitr: 
  opts_chunk: 
    comment: "#>>>"
    collapse: TRUE
number-sections: true
code-fold: show
code-link: true
code-tools: true
---

# R-Python {.unnumbered}

## [reticulate 包](https://rstudio.github.io/reticulate/index.html){.uri}

```{r}
#| comment: "#>"
library(reticulate)
```

## **安装 python 模块**

[安装Python module](https://rstudio.github.io/reticulate/articles/python_packages.html)

```{r}
#| eval: false
#| comment: "#>"
# 默认从conda安装

py_install("seaborn")
py_available()
# 查看模块是否已安装
py_module_available('seaborn')
py_module_available('numpy')
py_module_available('pandas')
py_module_available('scanpy')
py_module_available('pip')
```

## 调用 Python 模块

```{r}
#| comment: "#>"
# 调用os模块(module)的listdir()函数
os <- import("os")
os$listdir("./")

# 调用seaborn模块的load_dataset()函数
# 需要seaborn模块已安装
sns <- import("seaborn")
tips <- sns$load_dataset("tips")
print(head(tips))
```

## markdown中直接使用Python

```{python}
import seaborn as sns
tips = sns.load_dataset("tips")
tips.head()

sns.scatterplot(x="total_bill", y="tip", data=tips, hue="smoker")

import pandas
```

## **markdown 中 Python 与 R 对象相互调用**

### Python调用R对象

```{r}
#| comment: "#>"
x <- c(1, 2, 3)
y <- data.frame(a = c(1, 2), b = c(3, 4))
```

```{python}
r.x
r.y
```

### R调用Python对象

```{python}
import pandas as pd
m = [1, 2, 3]
n = pd.DataFrame([[1, 2], [3, 4]], columns=["a", "b"])
```

```{r}
#| comment: "#>"
py$m
py$n
```

## **Python 与 R 对象相互转换**

| R                      | Python            | 例                                               |
|------------------|------------------|-----------------------------------|
| 单元素向量             | 标量Scalar        | `1`、 `1L`、`TRUE`、`"foo"`                      |
| 未命名列表或多元素向量 | List              | `c(1.0, 2.0, 3.0)`, `c(1L, 2L, 3L)`              |
| 命名列表               | Dict              | `list(a = 1L, b = 2.0)`, `dict(x = x_data)`      |
| Matrix/Array           | NumPy ndarray     | `matrix(c(1,2,3,4), nrow = 2, ncol = 2)`         |
| Data Frame             | Pandas DataFrame  | `data.frame(x = c(1,2,3), y = c("a", "b", "c"))` |
| Function               | Python function   | `function(x) x + 1`                              |
| NULL, TRUE, FALSE      | None, True, False | `NULL`, `TRUE`, `ALSE`                           |

: Type conversions

### **R** → Python

```{r}
#| comment: "#>"
A <- 1
B <- c(1, 2, 3)
C <- c(a = 1, b = 2, c = 3)
D <- matrix(1:4, nrow = 2)
E <- data.frame(a = c(1, 2), b = c(3, 4))
G <- list(1, 2, 3)
H <- list(c(1, 2), c(3, 4))
I <- list(a = c(1, 2), b = c(3, 4))
J <- function(a, b) {
  return(a + b)
  }
K1 <- NULL
K2 <- T
K3 <- F
```

```{python}
### float
r.A
type(r.A)

### list
r.B
type(r.B)

r.C
type(r.C)

### numpy.ndarray
r.D
type(r.D)

### pandas.core.frame.DataFrame
r.E
type(r.E)

### list
r.G
type(r.G)

r.H
type(r.H)

### dict
r.I
type(r.I)

### function
r.J
type(r.J)
r.J(2, 3)


### NoneType
r.K1
type(r.K1)


### bool
r.K2
type(r.K2)
r.K3
type(r.K3)
```

### **Python** → R

```{python}
A = 1
B = [1, 2, 3]
C = [[1, 2], [3, 4]]
D1 = [[1], 2, 3]
D2 = [[1, 2], 2, 3]

E = (1, 2, 3)

FF = ((1, 2), (3, 4))

G = ((1, 2), 3, 4)

H = {"a": [1, 2, 3],  "b": [2, 3, 4]}
     
I = {"a": 1,"b": [2, 3, 4]}
     
def J(a, b):
  return a + b
```

```{r}
#| comment: "#>"
### integer
py$A
class(py$A)

py$B
class(py$B)

### list
py$C
class(py$C)

py$D1
class(py$D1)

py$D2
class(py$D2)

py$E
class(py$E)

py$FF
class(py$FF)

py$G
class(py$G)

py$H
class(py$H)

py$I
class(py$I)

### function
py$J
class(py$J)
py$J(2, 3)
```
