{"title":"列表list","markdown":{"yaml":{"knitr":{"opts_chunk":{"comment":"#>>>","collapse":true}},"number-sections":true,"code-fold":"show","code-link":true,"code-tools":true},"headingText":"列表list","containsRefs":false,"markdown":"\n\n\n在Python中，用方括号`[]` 表示列表，用逗号分隔其中的元素。\n\n```{python}\nCountry = [\"China\",'USA',\"UK\",\"France\",\"German\",\"Japan\"]\nprint(Country)\n```\n\n## 访问元素\n\n索引从0开始，而不是从1开始。\n\n```{python}\nprint(Country[0])\nprint(Country[4])\n```\n\n也可以从倒数第一个数向前访问\n\n```{python}\nprint(Country[-1])\nprint(Country[-2])\nprint(Country[-3])\n```\n\n使用列表中的值\n\n```{python}\nintro = f\"Hello,I'm from {Country[0]}!\"\nprint(intro)\n```\n\n## 修改、添加和删除元素\n\n### 修改元素\n\n```{python}\nnum = [1,2,3,4,5,6,7,8,9]\nprint(num)\n\nnum[0] = 0\nprint(num)\n```\n\n### 添加元素\n\n1.  **在列表末尾添加元素**\n\n    追加（`append()`）到列表末尾\n\n    ```{python}\n    num = [1,2,3,4,5,6,7,8,9]\n    print(num)\n\n    num.append(10)\n    print(num)\n    ```\n\n    可以先创建空列表，再用`append`逐个添加元素。\n\n    ```{python}\n    fruit = []\n    fruit.append(\"apple\")\n    fruit.append(\"pear\")\n\n    print(fruit)\n    ```\n\n2.  **在列表中插入元素**\n\n    使用`insert()`方法可在列表的任意位置添加元素\n\n    ```{python}\n    num = [1,2,3,4,5,6,7,8,9]\n    print(num)\n    num.insert(0,0)\n    num\n    ```\n\n### 删除元素\n\n1.  使用del 语句删除元素\n\n    ```{python}\n    num = [1,2,3,4,5,6,7,8,9]\n\n    del num[0]\n    del num[2]\n    num\n    ```\n\n2.  使用pop()方法删除元素\n\n    弹出`pop()` 方法删除列表末尾的元素\n\n    ```{python}\n    num = [1,2,3,4,5,6,7,8,9]\n    popped_num = num.pop()\n    num\n    popped_num\n    ```\n\n3.  删除任意位置的元素\n\n    也可以使用`pop()`方法删除列表中任意位置的元素，指定索引即可\n\n    ```{python}\n    num = [1,2,3,4,5,6,7,8,9]\n    fifth_num = num.pop(4)\n    num\n    ```\n\n4.  根据值删除元素\n\n    ```{python}\n    num = [1,2,3,4,5,6,7,8,9]\n    hate_num = 4\n    num.remove(hate_num)\n    num\n    ```\n\n## 管理列表\n\n1.  使用`sort()`方法永久排序\n\n    ```{python}\n    ### 字母顺序\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    letters.sort()\n    print(letters)\n\n    ### 字母逆序\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    letters.sort(reverse = True)\n    print(letters)\n    ```\n\n2.  使用`sorted()`函数临时排序\n\n    ```{python}\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    sorted(letters)\n    sorted(letters,reverse = True)\n    print(letters)\n    ```\n\n3.  使用`reverse()`方法反向打印列表\n\n    ```{python}\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    letters.reverse()\n    print(letters) #反向打印\n    letters.reverse()\n    print(letters) #恢复\n    ```\n\n4.  使用`len()`函数确定列表长度\n\n    ```{python}\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    len(letters)\n    ```\n\n## 遍历整个列表\n\n`for`循环\n\n注意避免缩进错误，如忘记缩进、忘记缩进额外的代码行、不必要的缩进、循环后不必要的缩进、遗漏冒号、\n\n```{python}\nsubjects = [\"Chinese\",\"Mathematics\",\"English\",\"Physics\",\"Chemistry\",\"Biology\"]\nfor subject in subjects:\n  print(f\"{subject}:\")\n  print(f\"{subject} is very important for students.\\n\")\nprint(\"day day up!\")\n```\n\n## 创建数值列表\n\n### 使用`range()`函数创建列表\n\n```{python}\nfor value in range(-3,3):\n  print(value)\n```\n\n```{python}\n\nnumbers = list(range(-5,5,2))\nnumbers\n\n\nsquares = []\nfor value in range(1,11):\n  square=value**2\n  squares.append(square)\nprint(squares)\n```\n\n### 统计函数\n\n```{python}\ndigits = list(range(0,10))\nmin(digits)\nmax(digits)\nsum(digits)\n```\n\n### 列表推导式list comprehension\n\n```{python}\nsquares = [i**2 for i in range(1,10)]\nsquares\n```\n\n## slice\n\n列表的部分称为**slice**。\n\n```{python}\nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n# 左包含，右不包含\nletters[0:3] \nletters[3:5]  \nletters[:3]    # 0，1，2\nletters[:-2]   # 从头到倒数第2之前1位\nletters[2:]    # 从第3到末尾\nletters[-3:]   # 从倒数第3到末尾\n\nletters[::2] # 从头到尾每间隔2打印\nletters[1::3]\n\n\n\n\n# 遍历slice\n\nfor i in letters[:3]:\n  i.upper()\n  \n\n# 复制slice\n字母 = letters[:]  # 从头到尾\n字母.append(\"X\")\n字母\nletters.append(\"Y\")\nletters\n\n#不使用slice   \nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nletters\nLETTERS = letters         # 两种指向同一个列表\nLETTERS.append(\"X\")\nLETTERS\nletters\nletters.append(\"Y\")     \nLETTERS\nletters\n\n```\n\n## 元组tuple\n\nPython将不能修改的值称为**不可变的**。而不可变的列表称为**元组（tuple）**。元组使用圆括号`()`+逗号`,`标识。严格地说，元组是用逗号标识的，圆括号只是让元组看起来更整洁、更清晰，并不是必须的。\n\n```{python}\ndimensions = (200,50,4)\ndimensions\n# dimensions[0] = 333 # 'tuple' object does not support item assignment\n\nsingle = 9,\n# single[0] = 3\n```\n\n虽然元组的元素不能修改，但可以重新给表示元组的变量赋值\n\n```{python}\ndimensions = (200,50,4)\ndimensions\ndimensions = 2,3,4,5\ndimensions\nfor i in dimensions:\n  i\n```\n","srcMarkdownNoYaml":"\n\n# 列表list\n\n在Python中，用方括号`[]` 表示列表，用逗号分隔其中的元素。\n\n```{python}\nCountry = [\"China\",'USA',\"UK\",\"France\",\"German\",\"Japan\"]\nprint(Country)\n```\n\n## 访问元素\n\n索引从0开始，而不是从1开始。\n\n```{python}\nprint(Country[0])\nprint(Country[4])\n```\n\n也可以从倒数第一个数向前访问\n\n```{python}\nprint(Country[-1])\nprint(Country[-2])\nprint(Country[-3])\n```\n\n使用列表中的值\n\n```{python}\nintro = f\"Hello,I'm from {Country[0]}!\"\nprint(intro)\n```\n\n## 修改、添加和删除元素\n\n### 修改元素\n\n```{python}\nnum = [1,2,3,4,5,6,7,8,9]\nprint(num)\n\nnum[0] = 0\nprint(num)\n```\n\n### 添加元素\n\n1.  **在列表末尾添加元素**\n\n    追加（`append()`）到列表末尾\n\n    ```{python}\n    num = [1,2,3,4,5,6,7,8,9]\n    print(num)\n\n    num.append(10)\n    print(num)\n    ```\n\n    可以先创建空列表，再用`append`逐个添加元素。\n\n    ```{python}\n    fruit = []\n    fruit.append(\"apple\")\n    fruit.append(\"pear\")\n\n    print(fruit)\n    ```\n\n2.  **在列表中插入元素**\n\n    使用`insert()`方法可在列表的任意位置添加元素\n\n    ```{python}\n    num = [1,2,3,4,5,6,7,8,9]\n    print(num)\n    num.insert(0,0)\n    num\n    ```\n\n### 删除元素\n\n1.  使用del 语句删除元素\n\n    ```{python}\n    num = [1,2,3,4,5,6,7,8,9]\n\n    del num[0]\n    del num[2]\n    num\n    ```\n\n2.  使用pop()方法删除元素\n\n    弹出`pop()` 方法删除列表末尾的元素\n\n    ```{python}\n    num = [1,2,3,4,5,6,7,8,9]\n    popped_num = num.pop()\n    num\n    popped_num\n    ```\n\n3.  删除任意位置的元素\n\n    也可以使用`pop()`方法删除列表中任意位置的元素，指定索引即可\n\n    ```{python}\n    num = [1,2,3,4,5,6,7,8,9]\n    fifth_num = num.pop(4)\n    num\n    ```\n\n4.  根据值删除元素\n\n    ```{python}\n    num = [1,2,3,4,5,6,7,8,9]\n    hate_num = 4\n    num.remove(hate_num)\n    num\n    ```\n\n## 管理列表\n\n1.  使用`sort()`方法永久排序\n\n    ```{python}\n    ### 字母顺序\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    letters.sort()\n    print(letters)\n\n    ### 字母逆序\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    letters.sort(reverse = True)\n    print(letters)\n    ```\n\n2.  使用`sorted()`函数临时排序\n\n    ```{python}\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    sorted(letters)\n    sorted(letters,reverse = True)\n    print(letters)\n    ```\n\n3.  使用`reverse()`方法反向打印列表\n\n    ```{python}\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    letters.reverse()\n    print(letters) #反向打印\n    letters.reverse()\n    print(letters) #恢复\n    ```\n\n4.  使用`len()`函数确定列表长度\n\n    ```{python}\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    len(letters)\n    ```\n\n## 遍历整个列表\n\n`for`循环\n\n注意避免缩进错误，如忘记缩进、忘记缩进额外的代码行、不必要的缩进、循环后不必要的缩进、遗漏冒号、\n\n```{python}\nsubjects = [\"Chinese\",\"Mathematics\",\"English\",\"Physics\",\"Chemistry\",\"Biology\"]\nfor subject in subjects:\n  print(f\"{subject}:\")\n  print(f\"{subject} is very important for students.\\n\")\nprint(\"day day up!\")\n```\n\n## 创建数值列表\n\n### 使用`range()`函数创建列表\n\n```{python}\nfor value in range(-3,3):\n  print(value)\n```\n\n```{python}\n\nnumbers = list(range(-5,5,2))\nnumbers\n\n\nsquares = []\nfor value in range(1,11):\n  square=value**2\n  squares.append(square)\nprint(squares)\n```\n\n### 统计函数\n\n```{python}\ndigits = list(range(0,10))\nmin(digits)\nmax(digits)\nsum(digits)\n```\n\n### 列表推导式list comprehension\n\n```{python}\nsquares = [i**2 for i in range(1,10)]\nsquares\n```\n\n## slice\n\n列表的部分称为**slice**。\n\n```{python}\nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n# 左包含，右不包含\nletters[0:3] \nletters[3:5]  \nletters[:3]    # 0，1，2\nletters[:-2]   # 从头到倒数第2之前1位\nletters[2:]    # 从第3到末尾\nletters[-3:]   # 从倒数第3到末尾\n\nletters[::2] # 从头到尾每间隔2打印\nletters[1::3]\n\n\n\n\n# 遍历slice\n\nfor i in letters[:3]:\n  i.upper()\n  \n\n# 复制slice\n字母 = letters[:]  # 从头到尾\n字母.append(\"X\")\n字母\nletters.append(\"Y\")\nletters\n\n#不使用slice   \nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nletters\nLETTERS = letters         # 两种指向同一个列表\nLETTERS.append(\"X\")\nLETTERS\nletters\nletters.append(\"Y\")     \nLETTERS\nletters\n\n```\n\n## 元组tuple\n\nPython将不能修改的值称为**不可变的**。而不可变的列表称为**元组（tuple）**。元组使用圆括号`()`+逗号`,`标识。严格地说，元组是用逗号标识的，圆括号只是让元组看起来更整洁、更清晰，并不是必须的。\n\n```{python}\ndimensions = (200,50,4)\ndimensions\n# dimensions[0] = 333 # 'tuple' object does not support item assignment\n\nsingle = 9,\n# single[0] = 3\n```\n\n虽然元组的元素不能修改，但可以重新给表示元组的变量赋值\n\n```{python}\ndimensions = (200,50,4)\ndimensions\ndimensions = 2,3,4,5\ndimensions\nfor i in dimensions:\n  i\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":6,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":true,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":4,"number-sections":true,"html-math-method":"katex","output-file":"02list.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","bibliography":["references.bib"],"toc-expand":true,"toc-location":"right","knitr":{"opts_chunk":{"comment":"#>>>","collapse":true}},"crossref":{"fig-title":"图","fig-prefix":"图"},"fig-asp":0.618,"editor":"visual","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}