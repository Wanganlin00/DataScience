{
  "hash": "3b8617c4f5ff146072f60340004d3419",
  "result": {
    "markdown": "---\nknitr: \n  opts_chunk: \n    comment: \"#>>>\"\n    collapse: TRUE\nnumber-sections: true\ncode-fold: show\ncode-link: true\ncode-tools: true\n---\n\n\n# 类class\n\n面向对象编程（object-oriented programming，OOP）：编写表示现实世界中的事物和情景的**类（class）并**基于这些类创建**对象（object）。**在编写类时，你要定义所有对象都具备的通用行为。根据类创建对象称为**实例化**，**实例（instance）**\n\n## 定义类和方法\n\n类中的函数称为**方法**，`_init_(self,...)` 是一个特殊方法，其中`self` 形参指向实例，必不可少且必须位于首位。其他形参是基于类创建的实例的初始化属性。可通过实例访问的变量称为**属性（attribute）**。\n\n\n::: {.cell hash='class_cache/html/unnamed-chunk-1_b44a272b63fc3d1d6a64e8a3cbfb02fd'}\n\n```{.python .cell-code}\n# 定义类\nclass Car:\n    \"\"\"表示汽车的类，存储有关汽车的信息 \"\"\"\n    def __init__(self, make, model, year): \n        \"\"\"初始化描述汽车的属性\"\"\" \n        self.make = make \n        self.model = model \n        self.year = year \n        self.odometer_reading = 0  # 给属性指定默认值\n    def get_descriptive_name(self): \n        \"\"\"返回格式规范的描述性信息\"\"\" \n        long_name = f\"{self.year} {self.make} {self.model}\" \n        return long_name.title() \n    def read_odometer(self):\n        \"\"\"打印汽车行驶里程\"\"\"\n        print(f\"This car has {self.odometer_reading} miles on it.\")\n    def update_odometer(self,mileage):\n        \"\"\"更新里程数\n           禁止回调        \"\"\"\n        if mileage >= self.odometer_reading:\n            self.odometer_reading = mileage\n        else:\n            print(\"错误！禁止回调！！！\")\n            \n# 创建对象\nmy_new_car = Car('audi', 'a4', 2024)\n```\n:::\n\n::: {.cell hash='class_cache/html/unnamed-chunk-2_ce3489676aa9182948796aa88bc055cc'}\n\n```{.python .cell-code}\n# 访问属性\nmy_new_car.make\n#>>> 'audi'\nmy_new_car.odometer_reading\n#>>> 0\n\n# 调用方法\nprint(my_new_car.get_descriptive_name())\n#>>> 2024 Audi A4\nmy_new_car.read_odometer() \n#>>> This car has 0 miles on it.\n```\n:::\n\n\n### 修改属性的值\n\n\n::: {.cell hash='class_cache/html/unnamed-chunk-3_bee762e334f98a2be4b34ccef8f5adf6'}\n\n```{.python .cell-code}\n# 通过属性修改\nmy_new_car.odometer_reading = 55\nmy_new_car.odometer_reading\n#>>> 55\n\n# 通过方法修改\nmy_new_car.update_odometer(100)\nmy_new_car.odometer_reading\n#>>> 100\nmy_new_car.update_odometer(24)\n#>>> 错误！禁止回调！！！\n```\n:::\n\n\n## 继承inheritance\n\n原有的类称为父类（parent class），新类称为子类（child class）\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}