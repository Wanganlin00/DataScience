{
  "hash": "2dc9f5ebbe5a445e95dd68697396619e",
  "result": {
    "markdown": "---\nknitr: \n  opts_chunk: \n    comment: \"#>>>\"\n    collapse: TRUE\nnumber-sections: true\ncode-fold: show\ncode-link: true\ncode-tools: true\n---\n\n\n# 函数\n\n## 定义函数\n\n### 传参\n\n\n::: {.cell hash='function_cache/html/unnamed-chunk-1_b61cee58ce4a4072b9184c318ffa5b54'}\n\n```{.python .cell-code}\ndef greet_user(username):\n    \"\"\"文档字符串（docstring）\"\"\"\n    print(f\"Hello,{username.title()}\")\n\ngreet_user(\"lily\")\n#>>> Hello,Lily\n```\n:::\n\n\n### 形参（parameter）和实参（argument）\n\n形参即函数完成任务所需要的信息，例如`greet_user(username)`中的`username`。\n\n实参即在调用call 函数时传递给函数的信息，例如`greet_user(\"lily\")`中的`\"lily\"`。\n\n位置实参 关键字实参 \n默认值，在给形参指定默认值时，等号两边不要出现空格，函数调用中的关键字实参也遵循这种约定。\n\n## 返回值\n\n### 返回字典\n\n实参可选\n\n\n::: {.cell hash='function_cache/html/unnamed-chunk-2_2c18c5b6555634f55ed934e736ea1a66'}\n\n```{.python .cell-code}\ndef get_formatted_name(first_name, last_name, middle_name=''):\n    \"\"\"返回标准格式的姓名\"\"\"\n    if middle_name: \n        full_name = f\"{first_name} {middle_name} {last_name}\"\n    else: \n        full_name = f\"{first_name} {last_name}\" \n    return full_name.title() \n\nmusician = get_formatted_name('jimi', 'hendrix') \nprint(musician) \n#>>> Jimi Hendrix\nmusician = get_formatted_name('john', 'hooker', 'lee') \nprint(musician)\n#>>> John Lee Hooker\n```\n:::\n\n::: {.cell hash='function_cache/html/unnamed-chunk-3_1ffcec8e960e6066486c0b6f2b8c80d7'}\n\n```{.python .cell-code}\ndef build_person(first_name,last_name,age=None):\n    \"\"\" 返回字典，其中包含姓名或年龄\"\"\"\n    person = {\"first\": first_name,\"last\":last_name}\n    \n    if age:\n        person[\"age\"] = age\n    return person\nmusician = build_person('jimi', 'hendrix',27) \nprint(musician) \n#>>> {'first': 'jimi', 'last': 'hendrix', 'age': 27}\n```\n:::\n\n\n## 传递列表\n\n\n::: {.cell hash='function_cache/html/unnamed-chunk-4_00dd4cb60dfd77a2e82c8e742d5198ed'}\n\n```{.python .cell-code}\n# 函数\ndef print_models(unprinted_designs, completed_models): \n    \"\"\" 模拟打印每个设计，直到没有未打印的设计为止\n    打印每个设计后，都将其移到列表 completed_models 中 \"\"\" \n    while unprinted_designs: \n        current_design = unprinted_designs.pop() \n        print(f\"Printing model: {current_design}\") \n        completed_models.append(current_design)\n        \ndef show_completed_models(completed_models): \n    \"\"\"显示打印好的所有模型\"\"\" \n    print(\"\\nThe following models have been printed:\") \n    for completed_model in completed_models: \n        print(completed_model) \n\n# 主程序\nunprinted_designs = ['phone case', 'robot pendant', 'dodecahedron']\ncompleted_models = [] \n\nprint_models(unprinted_designs, completed_models) \n#>>> Printing model: dodecahedron\n#>>> Printing model: robot pendant\n#>>> Printing model: phone case\nshow_completed_models(completed_models)\n#>>> \n#>>> The following models have been printed:\n#>>> dodecahedron\n#>>> robot pendant\n#>>> phone case\n\nunprinted_designs\n#>>> []\ncompleted_models\n#>>> ['dodecahedron', 'robot pendant', 'phone case']\n\n# 主程序 使用列表副本\nunprinted_designs = ['phone case', 'robot pendant', 'dodecahedron']\ncompleted_models = [] \n\nprint_models(unprinted_designs[:], completed_models) \n#>>> Printing model: dodecahedron\n#>>> Printing model: robot pendant\n#>>> Printing model: phone case\nshow_completed_models(completed_models)\n#>>> \n#>>> The following models have been printed:\n#>>> dodecahedron\n#>>> robot pendant\n#>>> phone case\n\nunprinted_designs\n#>>> ['phone case', 'robot pendant', 'dodecahedron']\ncompleted_models\n#>>> ['dodecahedron', 'robot pendant', 'phone case']\n```\n:::\n\n\n## 传递任意数量的实参\n\n\n::: {.cell hash='function_cache/html/unnamed-chunk-5_b403a9deca84b27f98e1b66fc70629a9'}\n\n```{.python .cell-code}\ndef make_pizza(*toppings):\n    \"\"\"打印顾客点的所有配料\"\"\"\n    print(toppings)\n    return toppings\ntps = make_pizza(\"qwe\",\"asd\",\"zxc\")\n#>>> ('qwe', 'asd', 'zxc')\n```\n:::\n\n\nPython先匹配位置实参和关键字实参，再将剩余的实参匹配到最后一个形参。`*toppings` 中的星号 `*` 创建一个名为 `toppings` 的元组。\n\n`**user_info`中的两个星号 `**` 创建一个名为`user_info`的字典，接收任意数量的关键字实参\n\n\n::: {.cell hash='function_cache/html/unnamed-chunk-6_c3810a16b2ae579a08cd016d2f058205'}\n\n```{.python .cell-code}\ndef build_profile(first, last, **user_info):\n    \"\"\"创建一个字典，其中包含我们知道的有关用户的一切\"\"\"\n    user_info['first_name'] = first \n    user_info['last_name'] = last \n    return user_info \n\nuser_profile = build_profile('albert', 'einstein', location='princeton', field='physics') \nprint(user_profile)\n#>>> {'location': 'princeton', 'field': 'physics', 'first_name': 'albert', 'last_name': 'einstein'}\n```\n:::\n\n\n## 模块module\n## 导入整个模块\n```\nimport module_name\nmodule_name.function_name()\n\n```\n## 使用as给模块指定别名\n```\nimport module_name as mn\nmn.function_name()\n```\n## 导入特定函数\n```\nfrom module_name import function_name\nfunction_name()\n```\n## 使用as给函数指定别名\n```\nfrom module_name import function_name as fn\nfn()\n```\n## 使用* 导入模块中使用函数\n不建议，同名覆盖\n```\nfrom module_name import *\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}