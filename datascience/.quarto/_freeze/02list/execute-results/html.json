{
  "hash": "d0197111a0079c8501c4224e414e346f",
  "result": {
    "markdown": "---\nknitr: \n  opts_chunk: \n    comment: \"#>>>\"\n    collapse: TRUE\nnumber-sections: true\ncode-fold: show\ncode-link: true\ncode-tools: true\n---\n\n\n# 列表list\n\n在Python中，用方括号`[]` 表示列表，用逗号分隔其中的元素。\n\n\n::: {.cell hash='02list_cache/html/unnamed-chunk-1_ffdecb10522b69cf707488bfae67a50d'}\n\n```{.python .cell-code}\nCountry = [\"China\",'USA',\"UK\",\"France\",\"German\",\"Japan\"]\nprint(Country)\n#>>> ['China', 'USA', 'UK', 'France', 'German', 'Japan']\n```\n:::\n\n\n## 访问元素\n\n索引从0开始，而不是从1开始。\n\n\n::: {.cell hash='02list_cache/html/unnamed-chunk-2_d6a1d780d6e5c7045760acff10dfc473'}\n\n```{.python .cell-code}\nprint(Country[0])\n#>>> China\nprint(Country[4])\n#>>> German\n```\n:::\n\n\n也可以从倒数第一个数向前访问\n\n\n::: {.cell hash='02list_cache/html/unnamed-chunk-3_dfceb742a1cd59514bc8a836e0dedf99'}\n\n```{.python .cell-code}\nprint(Country[-1])\n#>>> Japan\nprint(Country[-2])\n#>>> German\nprint(Country[-3])\n#>>> France\n```\n:::\n\n\n使用列表中的值\n\n\n::: {.cell hash='02list_cache/html/unnamed-chunk-4_4b224699353148ccfdcfeedcfeccf57c'}\n\n```{.python .cell-code}\nintro = f\"Hello,I'm from {Country[0]}!\"\nprint(intro)\n#>>> Hello,I'm from China!\n```\n:::\n\n\n## 修改、添加和删除元素\n\n### 修改元素\n\n\n::: {.cell hash='02list_cache/html/unnamed-chunk-5_6d6917fde44b85d724e79efa2ea30c09'}\n\n```{.python .cell-code}\nnum = [1,2,3,4,5,6,7,8,9]\nprint(num)\n#>>> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nnum[0] = 0\nprint(num)\n#>>> [0, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n:::\n\n\n### 添加元素\n\n1.  **在列表末尾添加元素**\n\n    追加（`append()`）到列表末尾\n\n\n    ::: {.cell hash='02list_cache/html/unnamed-chunk-6_8faa380a6c556f9d5ba1473d7d10b374'}\n    \n    ```{.python .cell-code}\n    num = [1,2,3,4,5,6,7,8,9]\n    print(num)\n    #>>> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \n    num.append(10)\n    print(num)\n    #>>> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    ```\n    :::\n\n\n    可以先创建空列表，再用`append`逐个添加元素。\n\n\n    ::: {.cell hash='02list_cache/html/unnamed-chunk-7_29338f2888113f5bcee6b19aa48be6ea'}\n    \n    ```{.python .cell-code}\n    fruit = []\n    fruit.append(\"apple\")\n    fruit.append(\"pear\")\n    \n    print(fruit)\n    #>>> ['apple', 'pear']\n    ```\n    :::\n\n\n2.  **在列表中插入元素**\n\n    使用`insert()`方法可在列表的任意位置添加元素\n\n\n    ::: {.cell hash='02list_cache/html/unnamed-chunk-8_f22be3be5cd65cc0f71fc3e5de59e242'}\n    \n    ```{.python .cell-code}\n    num = [1,2,3,4,5,6,7,8,9]\n    print(num)\n    #>>> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    num.insert(0,0)\n    num\n    #>>> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    ```\n    :::\n\n\n### 删除元素\n\n1.  使用del 语句删除元素\n\n\n    ::: {.cell hash='02list_cache/html/unnamed-chunk-9_09a42b41869499ac627be48f0e947884'}\n    \n    ```{.python .cell-code}\n    num = [1,2,3,4,5,6,7,8,9]\n    \n    del num[0]\n    del num[2]\n    num\n    #>>> [2, 3, 5, 6, 7, 8, 9]\n    ```\n    :::\n\n\n2.  使用pop()方法删除元素\n\n    弹出`pop()` 方法删除列表末尾的元素\n\n\n    ::: {.cell hash='02list_cache/html/unnamed-chunk-10_cbfec18383461e7af213e455c9e73322'}\n    \n    ```{.python .cell-code}\n    num = [1,2,3,4,5,6,7,8,9]\n    popped_num = num.pop()\n    num\n    #>>> [1, 2, 3, 4, 5, 6, 7, 8]\n    popped_num\n    #>>> 9\n    ```\n    :::\n\n\n3.  删除任意位置的元素\n\n    也可以使用`pop()`方法删除列表中任意位置的元素，指定索引即可\n\n\n    ::: {.cell hash='02list_cache/html/unnamed-chunk-11_b984914e78980ac85af1d9676b0a2dcb'}\n    \n    ```{.python .cell-code}\n    num = [1,2,3,4,5,6,7,8,9]\n    fifth_num = num.pop(4)\n    num\n    #>>> [1, 2, 3, 4, 6, 7, 8, 9]\n    ```\n    :::\n\n\n4.  根据值删除元素\n\n\n    ::: {.cell hash='02list_cache/html/unnamed-chunk-12_233e7f193359ab6ed3f891a8c0bfac5f'}\n    \n    ```{.python .cell-code}\n    num = [1,2,3,4,5,6,7,8,9]\n    hate_num = 4\n    num.remove(hate_num)\n    num\n    #>>> [1, 2, 3, 5, 6, 7, 8, 9]\n    ```\n    :::\n\n\n## 管理列表\n\n1.  使用`sort()`方法永久排序\n\n\n    ::: {.cell hash='02list_cache/html/unnamed-chunk-13_d8ee54214873024da5405d39e34d3836'}\n    \n    ```{.python .cell-code}\n    ### 字母顺序\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    letters.sort()\n    print(letters)\n    #>>> ['a', 'k', 'n', 'r', 'v', 'z']\n    \n    ### 字母逆序\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    letters.sort(reverse = True)\n    print(letters)\n    #>>> ['z', 'v', 'r', 'n', 'k', 'a']\n    ```\n    :::\n\n\n2.  使用`sorted()`函数临时排序\n\n\n    ::: {.cell hash='02list_cache/html/unnamed-chunk-14_4d7648e933c289eb3066ada9303276a5'}\n    \n    ```{.python .cell-code}\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    sorted(letters)\n    #>>> ['a', 'k', 'n', 'r', 'v', 'z']\n    sorted(letters,reverse = True)\n    #>>> ['z', 'v', 'r', 'n', 'k', 'a']\n    print(letters)\n    #>>> ['a', 'r', 'k', 'n', 'v', 'z']\n    ```\n    :::\n\n\n3.  使用`reverse()`方法反向打印列表\n\n\n    ::: {.cell hash='02list_cache/html/unnamed-chunk-15_db1333e306f3c2c655653868183d3e65'}\n    \n    ```{.python .cell-code}\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    letters.reverse()\n    print(letters) #反向打印\n    #>>> ['z', 'v', 'n', 'k', 'r', 'a']\n    letters.reverse()\n    print(letters) #恢复\n    #>>> ['a', 'r', 'k', 'n', 'v', 'z']\n    ```\n    :::\n\n\n4.  使用`len()`函数确定列表长度\n\n\n    ::: {.cell hash='02list_cache/html/unnamed-chunk-16_cff51d2ad1bcf882e49f2f382fe30262'}\n    \n    ```{.python .cell-code}\n    letters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n    len(letters)\n    #>>> 6\n    ```\n    :::\n\n\n## 遍历整个列表\n\n`for`循环\n\n注意避免缩进错误，如忘记缩进、忘记缩进额外的代码行、不必要的缩进、循环后不必要的缩进、遗漏冒号、\n\n\n::: {.cell hash='02list_cache/html/unnamed-chunk-17_5187f022b919506a512e9c67bea34b2d'}\n\n```{.python .cell-code}\nsubjects = [\"Chinese\",\"Mathematics\",\"English\",\"Physics\",\"Chemistry\",\"Biology\"]\nfor subject in subjects:\n  print(f\"{subject}:\")\n  print(f\"{subject} is very important for students.\\n\")\n#>>> Chinese:\n#>>> Chinese is very important for students.\n#>>> \n#>>> Mathematics:\n#>>> Mathematics is very important for students.\n#>>> \n#>>> English:\n#>>> English is very important for students.\n#>>> \n#>>> Physics:\n#>>> Physics is very important for students.\n#>>> \n#>>> Chemistry:\n#>>> Chemistry is very important for students.\n#>>> \n#>>> Biology:\n#>>> Biology is very important for students.\nprint(\"day day up!\")\n#>>> day day up!\n```\n:::\n\n\n## 创建数值列表\n\n### 使用`range()`函数创建列表\n\n\n::: {.cell hash='02list_cache/html/unnamed-chunk-18_c92f893e08aba56a74aa646692efe086'}\n\n```{.python .cell-code}\nfor value in range(-3,3):\n  print(value)\n#>>> -3\n#>>> -2\n#>>> -1\n#>>> 0\n#>>> 1\n#>>> 2\n```\n:::\n\n::: {.cell hash='02list_cache/html/unnamed-chunk-19_e8969eddf58bedc93ac163de801d70a7'}\n\n```{.python .cell-code}\n\nnumbers = list(range(-5,5,2))\nnumbers\n#>>> [-5, -3, -1, 1, 3]\n\n\nsquares = []\nfor value in range(1,11):\n  square=value**2\n  squares.append(square)\nprint(squares)\n#>>> [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n:::\n\n\n### 统计函数\n\n\n::: {.cell hash='02list_cache/html/unnamed-chunk-20_60d46e2675402912b63ecfbe394bce5f'}\n\n```{.python .cell-code}\ndigits = list(range(0,10))\nmin(digits)\n#>>> 0\nmax(digits)\n#>>> 9\nsum(digits)\n#>>> 45\n```\n:::\n\n\n### 列表推导式list comprehension\n\n\n::: {.cell hash='02list_cache/html/unnamed-chunk-21_1dbc1ad50e95c911904f3fcf94b877fb'}\n\n```{.python .cell-code}\nsquares = [i**2 for i in range(1,10)]\nsquares\n#>>> [1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n:::\n\n\n## slice\n\n列表的部分称为**slice**。\n\n\n::: {.cell hash='02list_cache/html/unnamed-chunk-22_568b4912a612a2ee6b9e9ed74c0e01d6'}\n\n```{.python .cell-code}\nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\n# 左包含，右不包含\nletters[0:3] \n#>>> ['a', 'r', 'k']\nletters[3:5]  \n#>>> ['n', 'v']\nletters[:3]    # 0，1，2\n#>>> ['a', 'r', 'k']\nletters[:-2]   # 从头到倒数第2之前1位\n#>>> ['a', 'r', 'k', 'n']\nletters[2:]    # 从第3到末尾\n#>>> ['k', 'n', 'v', 'z']\nletters[-3:]   # 从倒数第3到末尾\n#>>> ['n', 'v', 'z']\n\nletters[::2] # 从头到尾每间隔2打印\n#>>> ['a', 'k', 'v']\nletters[1::3]\n#>>> ['r', 'v']\n\n\n\n\n# 遍历slice\n\nfor i in letters[:3]:\n  i.upper()\n#>>> 'A'\n#>>> 'R'\n#>>> 'K'\n  \n\n# 复制slice\n字母 = letters[:]  # 从头到尾\n字母.append(\"X\")\n字母\n#>>> ['a', 'r', 'k', 'n', 'v', 'z', 'X']\nletters.append(\"Y\")\nletters\n#>>> ['a', 'r', 'k', 'n', 'v', 'z', 'Y']\n\n#不使用slice   \nletters = [\"a\",\"r\",\"k\",\"n\",\"v\",\"z\"]\nletters\n#>>> ['a', 'r', 'k', 'n', 'v', 'z']\nLETTERS = letters         # 两种指向同一个列表\nLETTERS.append(\"X\")\nLETTERS\n#>>> ['a', 'r', 'k', 'n', 'v', 'z', 'X']\nletters\n#>>> ['a', 'r', 'k', 'n', 'v', 'z', 'X']\nletters.append(\"Y\")     \nLETTERS\n#>>> ['a', 'r', 'k', 'n', 'v', 'z', 'X', 'Y']\nletters\n#>>> ['a', 'r', 'k', 'n', 'v', 'z', 'X', 'Y']\n```\n:::\n\n\n## 元组tuple\n\nPython将不能修改的值称为**不可变的**。而不可变的列表称为**元组（tuple）**。元组使用圆括号`()`+逗号`,`标识。严格地说，元组是用逗号标识的，圆括号只是让元组看起来更整洁、更清晰，并不是必须的。\n\n\n::: {.cell hash='02list_cache/html/unnamed-chunk-23_fd99d06391b698b5003a496d206fc686'}\n\n```{.python .cell-code}\ndimensions = (200,50,4)\ndimensions\n#>>> (200, 50, 4)\n# dimensions[0] = 333 # 'tuple' object does not support item assignment\n\nsingle = 9,\n# single[0] = 3\n```\n:::\n\n\n虽然元组的元素不能修改，但可以重新给表示元组的变量赋值\n\n\n::: {.cell hash='02list_cache/html/unnamed-chunk-24_63017366e0ac6911487ae2e415f6f405'}\n\n```{.python .cell-code}\ndimensions = (200,50,4)\ndimensions\n#>>> (200, 50, 4)\ndimensions = 2,3,4,5\ndimensions\n#>>> (2, 3, 4, 5)\nfor i in dimensions:\n  i\n#>>> 2\n#>>> 3\n#>>> 4\n#>>> 5\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}