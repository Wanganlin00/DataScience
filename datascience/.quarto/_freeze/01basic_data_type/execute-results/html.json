{
  "hash": "a419abde31e131988012ee20fcc2269c",
  "result": {
    "markdown": "---\nknitr: \n  opts_chunk: \n    comment: \"#>>>\"\n    collapse: TRUE\nnumber-sections: true\ncode-fold: show\ncode-link: true\ncode-tools: true\n---\n\n\n# 基本数据类型\n\n## 变量variable\n\n规则：\n\n-   变量名只能包含字母、数字、下划线、中文字符等，不能包含空格，且只能以字母或下划线开头，不能以数字开头。\n-   不要用Python关键字和函数名作为变量名。\n-   变量名具有描述性。\n\n创建一个名为`message`的变量（variable），`\"Hello python world!\"`是变量指向的值（value）。\n\n\n::: {.cell hash='01basic_data_type_cache/html/unnamed-chunk-1_9c04bdab44b2420af2ff9f43cadde0ca'}\n\n```{.python .cell-code}\nmessage = \"Hello , world!\" \n\n# 直接打印 或 print()\nmessage\n#>>> 'Hello , world!'\nprint(message)\n#>>> Hello , world!\n```\n:::\n\n\n## 字符串string\n\n用引号引起的是字符串，其中引号既可以是双引号，也可以是单引号。\n\n\n::: {.cell hash='01basic_data_type_cache/html/string_d3964696aaf9d7da84b49f2040a93eb1'}\n\n```{.python .cell-code}\n\"This is a string\"\n#>>> 'This is a string'\n'This is also a string'\n#>>> 'This is also a string'\n\"他说'世界是你们的，也是我们的，但终究是你们的'。流泪\\u1000\"\n#>>> \"他说'世界是你们的，也是我们的，但终究是你们的'。流泪က\"\n```\n:::\n\n\n### 使用方法method修改字符串\n\n例如，在函数调用`print()`中，方法 `title()` 出现在变量名后面。\n\nmethod是Python对数据执行的操作，在`name.title()`中，`name`是变量名，句点`.`让Python对name变量执行方法`title()`指定的操作。\n\n\n::: {.cell hash='01basic_data_type_cache/html/method_43fa48cfdd7951186bf8d867e87c9769'}\n\n```{.python .cell-code}\nname = \"ada lovelace\"\nname\n#>>> 'ada lovelace'\nprint(name)\n#>>> ada lovelace\nprint(name.title())\n#>>> Ada Lovelace\nprint(name.upper())\n#>>> ADA LOVELACE\nprint(name.lower())\n#>>> ada lovelace\nname\n#>>> 'ada lovelace'\n```\n:::\n\n\n| method            | 作用                           |\n|-------------------|--------------------------------|\n| `title()`         | 以首字母大写的方式显示每个单词 |\n| `upper()`         | 使字母全大写                   |\n| `lower()`         | 使字母全小写                   |\n| `strip()`         | 删除左右空白                   |\n| `rstrip()`        | 删除右空白                     |\n| `lstrip()`        | 删除左空白                     |\n| `removeprefix(x)` | 删除前缀x                      |\n\n: method\n\n### 在字符串中使用变量\n\n**f字符串**，在左`\"`之前添加字母`f` （format设置格式），再将变量名放入`{}`内。\n\n\n::: {.cell hash='01basic_data_type_cache/html/f_string_f6cdd2201bbc1f5fd098730b31c183bc'}\n\n```{.python .cell-code}\nfirst_name = \"ada\"\nlast_name = \"lovelace\"\nfull_name = f\"{first_name} {last_name}\"\nprint(full_name)\n#>>> ada lovelace\nprint(f\"Hello,{full_name.title()}!\")\n#>>> Hello,Ada Lovelace!\ngreet = f\"Hello,{full_name.title()}!\"\nprint(greet)\n#>>> Hello,Ada Lovelace!\n\nname = \"Eric\"\nmessage = f\"Hello {name},would you like to learn some Python today?\"\nmessage\n#>>> 'Hello Eric,would you like to learn some Python today?'\n```\n:::\n\n\n### 使用制表符或换行符添加空白\n\n**空白**泛指任何非打印字符，如空格、制表符、换行符。\n\n\n::: {.cell hash='01basic_data_type_cache/html/unnamed-chunk-2_252d85ff0e9026b3fa3df5de1cf532f9'}\n\n```{.python .cell-code}\nprint(\"Python\")\n#>>> Python\nprint(\"\\tPython\")\n#>>> \tPython\nprint(\"Languages:\\n\\t1.Python\\n\\t2.R\\n\\t3.C\")\n#>>> Languages:\n#>>> \t1.Python\n#>>> \t2.R\n#>>> \t3.C\n```\n:::\n\n\n### 删除空白\n\n\n::: {.cell hash='01basic_data_type_cache/html/unnamed-chunk-3_d4f4aa865c8a54763f05efa36996bf89'}\n\n```{.python .cell-code}\nlanguage = \" python \"\nlanguage\n#>>> ' python '\n#删除右空白\nlanguage.rstrip()\n#>>> ' python'\n\n#删除左空白\nlanguage.lstrip()\n#>>> 'python '\n\n#删除左右空白\nlanguage.strip()\n#>>> 'python'\n```\n:::\n\n\n但这种删除是暂时的\n\n\n::: {.cell hash='01basic_data_type_cache/html/unnamed-chunk-4_2a7aea2427a919867620281f4864404e'}\n\n```{.python .cell-code}\nlanguage\n#>>> ' python '\n```\n:::\n\n\n### 删除前后缀\n\n\n::: {.cell hash='01basic_data_type_cache/html/unnamed-chunk-5_80df57d4dee9d12c1fdbe43093069830'}\n\n```{.python .cell-code}\ngithub_url = \"https://github.com\"\ngithub_url.removeprefix(\"https://\")\n#>>> 'github.com'\n\nfile = \"basics.txt\"\nfile.removesuffix(\".txt\")\n#>>> 'basics'\n```\n:::\n\n\n## 数number\n\n### 整数integer\n\n可执行加`+`、减`-`、乘`*`、除`/`、整除`//`、乘方`**`、求模（取余数） `%` 运算。\n\n\n::: {.cell hash='01basic_data_type_cache/html/unnamed-chunk-6_c7d1ee1dd5583b06c53a5d2c06c7fb1e'}\n\n```{.python .cell-code}\n2+3\n#>>> 5\n5-2\n#>>> 3\n2*3\n#>>> 6\n8/2\n#>>> 4.0\n8//2\n#>>> 4\n9//2\n#>>> 4\n5**2\n#>>> 25\n10%3\n#>>> 1\nprint(5+3)\n#>>> 8\nprint(9-1)\n#>>> 8\nprint(4*2)\n#>>> 8\nprint(16//2)\n#>>> 8\nprint(2**3)\n#>>> 8\n```\n:::\n\n\n### 浮点数float\n\n\n::: {.cell hash='01basic_data_type_cache/html/unnamed-chunk-7_6536b0e499ca39220bdf81a85208d5ed'}\n\n```{.python .cell-code}\n0.2+0.5\n#>>> 0.7\n2*0.4\n#>>> 0.8\n0.2+0.1\n#>>> 0.30000000000000004\n3*0.1\n#>>> 0.30000000000000004\n\n4/2\n#>>> 2.0\n1+2.0\n#>>> 3.0\n3.0**2\n#>>> 9.0\n```\n:::\n\n\n### 数中的下划线\n\n位数分组\n\n\n::: {.cell hash='01basic_data_type_cache/html/unnamed-chunk-8_e7aad27ca131b44bca3c5d43044b8f3d'}\n\n```{.python .cell-code}\nx = 14_000_000_000\nx\n#>>> 14000000000\n```\n:::\n\n\n### 同时给多个变量赋值\n\n用逗号分隔\n\n\n::: {.cell hash='01basic_data_type_cache/html/unnamed-chunk-9_1076690963a23ba75d5eabd38e9975d8'}\n\n```{.python .cell-code}\nx,y,z = 1,2.0,4**2\nx\n#>>> 1\ny\n#>>> 2.0\nz\n#>>> 16\n```\n:::\n\n\n常量constant\n\n变量名全大写字母表示常量。\n\n\n::: {.cell hash='01basic_data_type_cache/html/unnamed-chunk-10_b50969497567266c35dde68138f3ff73'}\n\n```{.python .cell-code}\nFAVORITE_NUMBER = 9\nmessage = f\"My favorite number is {FAVORITE_NUMBER}\"\nprint(message)\n#>>> My favorite number is 9\n```\n:::\n\n\n## Python原则\n\n\n::: {.cell hash='01basic_data_type_cache/html/unnamed-chunk-11_e433d47b1bbbd962d378ef0b66b33b33'}\n\n```{.python .cell-code}\nimport this\n#>>> The Zen of Python, by Tim Peters\n#>>> \n#>>> Beautiful is better than ugly.\n#>>> Explicit is better than implicit.\n#>>> Simple is better than complex.\n#>>> Complex is better than complicated.\n#>>> Flat is better than nested.\n#>>> Sparse is better than dense.\n#>>> Readability counts.\n#>>> Special cases aren't special enough to break the rules.\n#>>> Although practicality beats purity.\n#>>> Errors should never pass silently.\n#>>> Unless explicitly silenced.\n#>>> In the face of ambiguity, refuse the temptation to guess.\n#>>> There should be one-- and preferably only one --obvious way to do it.\n#>>> Although that way may not be obvious at first unless you're Dutch.\n#>>> Now is better than never.\n#>>> Although never is often better than *right* now.\n#>>> If the implementation is hard to explain, it's a bad idea.\n#>>> If the implementation is easy to explain, it may be a good idea.\n#>>> Namespaces are one honking great idea -- let's do more of those!\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}